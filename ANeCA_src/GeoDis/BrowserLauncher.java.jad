// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   BrowserLauncher.java

package GeoDis;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.*;

public class BrowserLauncher
{

    private BrowserLauncher()
    {
    }

    private static boolean loadClasses()
    {
        switch(jvm)
        {
        case 2: // '\002'
        default:
            break;

        case 0: // '\0'
            try
            {
                Class aeTargetClass = Class.forName("com.apple.MacOS.AETarget");
                Class osUtilsClass = Class.forName("com.apple.MacOS.OSUtils");
                Class appleEventClass = Class.forName("com.apple.MacOS.AppleEvent");
                Class aeClass = Class.forName("com.apple.MacOS.ae");
                aeDescClass = Class.forName("com.apple.MacOS.AEDesc");
                aeTargetConstructor = aeTargetClass.getDeclaredConstructor(new Class[] {
                    Integer.TYPE
                });
                appleEventConstructor = appleEventClass.getDeclaredConstructor(new Class[] {
                    Integer.TYPE, Integer.TYPE, aeTargetClass, Integer.TYPE, Integer.TYPE
                });
                aeDescConstructor = aeDescClass.getDeclaredConstructor(new Class[] {
                    java/lang/String
                });
                makeOSType = osUtilsClass.getDeclaredMethod("makeOSType", new Class[] {
                    java/lang/String
                });
                putParameter = appleEventClass.getDeclaredMethod("putParameter", new Class[] {
                    Integer.TYPE, aeDescClass
                });
                sendNoReply = appleEventClass.getDeclaredMethod("sendNoReply", new Class[0]);
                Field keyDirectObjectField = aeClass.getDeclaredField("keyDirectObject");
                keyDirectObject = (Integer)keyDirectObjectField.get(null);
                Field autoGenerateReturnIDField = appleEventClass.getDeclaredField("kAutoGenerateReturnID");
                kAutoGenerateReturnID = (Integer)autoGenerateReturnIDField.get(null);
                Field anyTransactionIDField = appleEventClass.getDeclaredField("kAnyTransactionID");
                kAnyTransactionID = (Integer)anyTransactionIDField.get(null);
                break;
            }
            catch(ClassNotFoundException cnfe)
            {
                errorMessage = cnfe.getMessage();
                return false;
            }
            catch(NoSuchMethodException nsme)
            {
                errorMessage = nsme.getMessage();
                return false;
            }
            catch(NoSuchFieldException nsfe)
            {
                errorMessage = nsfe.getMessage();
                return false;
            }
            catch(IllegalAccessException iae)
            {
                errorMessage = iae.getMessage();
            }
            return false;

        case 1: // '\001'
            try
            {
                mrjFileUtilsClass = Class.forName("com.apple.mrj.MRJFileUtils");
                mrjOSTypeClass = Class.forName("com.apple.mrj.MRJOSType");
                Field systemFolderField = mrjFileUtilsClass.getDeclaredField("kSystemFolderType");
                kSystemFolderType = systemFolderField.get(null);
                findFolder = mrjFileUtilsClass.getDeclaredMethod("findFolder", new Class[] {
                    mrjOSTypeClass
                });
                getFileCreator = mrjFileUtilsClass.getDeclaredMethod("getFileCreator", new Class[] {
                    java/io/File
                });
                getFileType = mrjFileUtilsClass.getDeclaredMethod("getFileType", new Class[] {
                    java/io/File
                });
                break;
            }
            catch(ClassNotFoundException cnfe)
            {
                errorMessage = cnfe.getMessage();
                return false;
            }
            catch(NoSuchFieldException nsfe)
            {
                errorMessage = nsfe.getMessage();
                return false;
            }
            catch(NoSuchMethodException nsme)
            {
                errorMessage = nsme.getMessage();
                return false;
            }
            catch(SecurityException se)
            {
                errorMessage = se.getMessage();
                return false;
            }
            catch(IllegalAccessException iae)
            {
                errorMessage = iae.getMessage();
            }
            return false;

        case 3: // '\003'
            try
            {
                Class linker = Class.forName("com.apple.mrj.jdirect.Linker");
                Constructor constructor = linker.getConstructor(new Class[] {
                    java/lang/Class
                });
                linkage = constructor.newInstance(new Object[] {
                    edu/stanford/ejalbert/BrowserLauncher
                });
                break;
            }
            catch(ClassNotFoundException cnfe)
            {
                errorMessage = cnfe.getMessage();
                return false;
            }
            catch(NoSuchMethodException nsme)
            {
                errorMessage = nsme.getMessage();
                return false;
            }
            catch(InvocationTargetException ite)
            {
                errorMessage = ite.getMessage();
                return false;
            }
            catch(InstantiationException ie)
            {
                errorMessage = ie.getMessage();
                return false;
            }
            catch(IllegalAccessException iae)
            {
                errorMessage = iae.getMessage();
            }
            return false;

        case 4: // '\004'
            try
            {
                mrjFileUtilsClass = Class.forName("com.apple.mrj.MRJFileUtils");
                openURL = mrjFileUtilsClass.getDeclaredMethod("openURL", new Class[] {
                    java/lang/String
                });
                break;
            }
            catch(ClassNotFoundException cnfe)
            {
                errorMessage = cnfe.getMessage();
                return false;
            }
            catch(NoSuchMethodException nsme)
            {
                errorMessage = nsme.getMessage();
            }
            return false;
        }
        return true;
    }

    private static Object locateBrowser()
    {
        if(browser != null)
        {
            return browser;
        }
        jvm;
        JVM INSTR tableswitch -1 6: default 528
    //                   -1 528
    //                   0 60
    //                   1 200
    //                   2 528
    //                   3 504
    //                   4 504
    //                   5 512
    //                   6 520;
           goto _L1 _L1 _L2 _L3 _L1 _L4 _L4 _L5 _L6
_L2:
        try
        {
            Integer finderCreatorCode = (Integer)makeOSType.invoke(null, new Object[] {
                "MACS"
            });
            Object aeTarget = aeTargetConstructor.newInstance(new Object[] {
                finderCreatorCode
            });
            Integer gurlType = (Integer)makeOSType.invoke(null, new Object[] {
                "GURL"
            });
            Object appleEvent = appleEventConstructor.newInstance(new Object[] {
                gurlType, gurlType, aeTarget, kAutoGenerateReturnID, kAnyTransactionID
            });
            return appleEvent;
        }
        catch(IllegalAccessException iae)
        {
            browser = null;
            errorMessage = iae.getMessage();
            return browser;
        }
        catch(InstantiationException ie)
        {
            browser = null;
            errorMessage = ie.getMessage();
            return browser;
        }
        catch(InvocationTargetException ite)
        {
            browser = null;
            errorMessage = ite.getMessage();
            return browser;
        }
_L3:
        File systemFolder;
        String systemFolderFiles[];
        int i;
        try
        {
            systemFolder = (File)findFolder.invoke(null, new Object[] {
                kSystemFolderType
            });
        }
        catch(IllegalArgumentException iare)
        {
            browser = null;
            errorMessage = iare.getMessage();
            return browser;
        }
        catch(IllegalAccessException iae)
        {
            browser = null;
            errorMessage = iae.getMessage();
            return browser;
        }
        catch(InvocationTargetException ite)
        {
            browser = null;
            errorMessage = (new StringBuilder()).append(ite.getTargetException().getClass()).append(": ").append(ite.getTargetException().getMessage()).toString();
            return browser;
        }
        systemFolderFiles = systemFolder.list();
        i = 0;
_L9:
        if(i >= systemFolderFiles.length) goto _L8; else goto _L7
_L7:
        File file;
        Object fileType;
        Object fileCreator;
        try
        {
            file = new File(systemFolder, systemFolderFiles[i]);
            if(!file.isFile())
            {
                continue; /* Loop/switch isn't completed */
            }
        }
        catch(IllegalArgumentException iare)
        {
            browser = browser;
            errorMessage = iare.getMessage();
            return null;
        }
        catch(IllegalAccessException iae)
        {
            browser = null;
            errorMessage = iae.getMessage();
            return browser;
        }
        catch(InvocationTargetException ite)
        {
            browser = null;
            errorMessage = (new StringBuilder()).append(ite.getTargetException().getClass()).append(": ").append(ite.getTargetException().getMessage()).toString();
            return browser;
        }
        fileType = getFileType.invoke(null, new Object[] {
            file
        });
        if(!"FNDR".equals(fileType.toString()))
        {
            continue; /* Loop/switch isn't completed */
        }
        fileCreator = getFileCreator.invoke(null, new Object[] {
            file
        });
        if("MACS".equals(fileCreator.toString()))
        {
            browser = file.toString();
            return browser;
        }
        continue; /* Loop/switch isn't completed */
        i++;
          goto _L9
_L8:
        browser = null;
        break; /* Loop/switch isn't completed */
_L4:
        browser = "";
        break; /* Loop/switch isn't completed */
_L5:
        browser = "cmd.exe";
        break; /* Loop/switch isn't completed */
_L6:
        browser = "command.com";
        break; /* Loop/switch isn't completed */
_L1:
        browser = "netscape";
        return browser;
    }

    public static void openURL(String url)
        throws IOException
    {
        Object browser;
        if(!loadedWithoutErrors)
        {
            throw new IOException((new StringBuilder()).append("Exception in finding browser: ").append(errorMessage).toString());
        }
        browser = locateBrowser();
        if(browser == null)
        {
            throw new IOException((new StringBuilder()).append("Unable to locate browser: ").append(errorMessage).toString());
        }
        jvm;
        JVM INSTR tableswitch -1 6: default 761
    //                   -1 640
    //                   0 120
    //                   1 283
    //                   2 761
    //                   3 308
    //                   4 446
    //                   5 531
    //                   6 531;
           goto _L1 _L2 _L3 _L4 _L1 _L5 _L6 _L7 _L7
_L3:
        Object aeDesc = null;
        try
        {
            aeDesc = aeDescConstructor.newInstance(new Object[] {
                url
            });
            putParameter.invoke(browser, new Object[] {
                keyDirectObject, aeDesc
            });
            sendNoReply.invoke(browser, new Object[0]);
        }
        catch(InvocationTargetException ite)
        {
            throw new IOException((new StringBuilder()).append("InvocationTargetException while creating AEDesc: ").append(ite.getMessage()).toString());
        }
        catch(IllegalAccessException iae)
        {
            throw new IOException((new StringBuilder()).append("IllegalAccessException while building AppleEvent: ").append(iae.getMessage()).toString());
        }
        catch(InstantiationException ie)
        {
            throw new IOException((new StringBuilder()).append("InstantiationException while creating AEDesc: ").append(ie.getMessage()).toString());
        }
        aeDesc = null;
        browser = null;
        break; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        aeDesc = null;
        browser = null;
        throw exception;
_L4:
        Runtime.getRuntime().exec(new String[] {
            (String)browser, url
        });
        break; /* Loop/switch isn't completed */
_L5:
        int instance[] = new int[1];
        int result = ICStart(instance, 0);
        if(result == 0)
        {
            int selectionStart[] = {
                0
            };
            byte urlBytes[] = url.getBytes();
            int selectionEnd[] = {
                urlBytes.length
            };
            result = ICLaunchURL(instance[0], new byte[] {
                0
            }, urlBytes, urlBytes.length, selectionStart, selectionEnd);
            if(result == 0)
            {
                ICStop(instance);
            } else
            {
                throw new IOException((new StringBuilder()).append("Unable to launch URL: ").append(result).toString());
            }
        } else
        {
            throw new IOException((new StringBuilder()).append("Unable to create an Internet Config instance: ").append(result).toString());
        }
        break; /* Loop/switch isn't completed */
_L6:
        try
        {
            openURL.invoke(null, new Object[] {
                url
            });
        }
        catch(InvocationTargetException ite)
        {
            throw new IOException((new StringBuilder()).append("InvocationTargetException while calling openURL: ").append(ite.getMessage()).toString());
        }
        catch(IllegalAccessException iae)
        {
            throw new IOException((new StringBuilder()).append("IllegalAccessException while calling openURL: ").append(iae.getMessage()).toString());
        }
        break; /* Loop/switch isn't completed */
_L7:
        Process process = Runtime.getRuntime().exec(new String[] {
            (String)browser, "/c", "start", "\"\"", (new StringBuilder()).append('"').append(url).append('"').toString()
        });
        try
        {
            process.waitFor();
            process.exitValue();
        }
        catch(InterruptedException ie)
        {
            throw new IOException((new StringBuilder()).append("InterruptedException while launching browser: ").append(ie.getMessage()).toString());
        }
        break; /* Loop/switch isn't completed */
_L2:
        Process process = Runtime.getRuntime().exec(new String[] {
            (String)browser, "-remote", (new StringBuilder()).append("'openURL(").append(url).append(")'").toString()
        });
        try
        {
            int exitCode = process.waitFor();
            if(exitCode != 0)
            {
                Runtime.getRuntime().exec(new String[] {
                    (String)browser, url
                });
            }
        }
        catch(InterruptedException ie)
        {
            throw new IOException((new StringBuilder()).append("InterruptedException while launching browser: ").append(ie.getMessage()).toString());
        }
        break; /* Loop/switch isn't completed */
_L1:
        Runtime.getRuntime().exec(new String[] {
            (String)browser, url
        });
    }

    private static native int ICStart(int ai[], int i);

    private static native int ICStop(int ai[]);

    private static native int ICLaunchURL(int i, byte abyte0[], byte abyte1[], int j, int ai[], int ai1[]);

    private static int jvm;
    private static Object browser;
    private static boolean loadedWithoutErrors;
    private static Class mrjFileUtilsClass;
    private static Class mrjOSTypeClass;
    private static Class aeDescClass;
    private static Constructor aeTargetConstructor;
    private static Constructor appleEventConstructor;
    private static Constructor aeDescConstructor;
    private static Method findFolder;
    private static Method getFileCreator;
    private static Method getFileType;
    private static Method openURL;
    private static Method makeOSType;
    private static Method putParameter;
    private static Method sendNoReply;
    private static Object kSystemFolderType;
    private static Integer keyDirectObject;
    private static Integer kAutoGenerateReturnID;
    private static Integer kAnyTransactionID;
    private static Object linkage;
    private static final String JDirect_MacOSX = "/System/Library/Frameworks/Carbon.framework/Frameworks/HIToolbox.framework/HIToolbox";
    private static final int MRJ_2_0 = 0;
    private static final int MRJ_2_1 = 1;
    private static final int MRJ_3_0 = 3;
    private static final int MRJ_3_1 = 4;
    private static final int WINDOWS_NT = 5;
    private static final int WINDOWS_9x = 6;
    private static final int OTHER = -1;
    private static final String FINDER_TYPE = "FNDR";
    private static final String FINDER_CREATOR = "MACS";
    private static final String GURL_EVENT = "GURL";
    private static final String FIRST_WINDOWS_PARAMETER = "/c";
    private static final String SECOND_WINDOWS_PARAMETER = "start";
    private static final String THIRD_WINDOWS_PARAMETER = "\"\"";
    private static final String NETSCAPE_REMOTE_PARAMETER = "-remote";
    private static final String NETSCAPE_OPEN_PARAMETER_START = "'openURL(";
    private static final String NETSCAPE_OPEN_PARAMETER_END = ")'";
    private static String errorMessage;

    static 
    {
        loadedWithoutErrors = true;
        String osName = System.getProperty("os.name");
        if(osName.startsWith("Mac OS"))
        {
            String mrjVersion = System.getProperty("mrj.version");
            String majorMRJVersion = mrjVersion.substring(0, 3);
            try
            {
                double version = Double.valueOf(majorMRJVersion).doubleValue();
                if(version == 2D)
                {
                    jvm = 0;
                } else
                if(version >= 2.1000000000000001D && version < 3D)
                {
                    jvm = 1;
                } else
                if(version == 3D)
                {
                    jvm = 3;
                } else
                if(version >= 3.1000000000000001D)
                {
                    jvm = 4;
                } else
                {
                    loadedWithoutErrors = false;
                    errorMessage = (new StringBuilder()).append("Unsupported MRJ version: ").append(version).toString();
                }
            }
            catch(NumberFormatException nfe)
            {
                loadedWithoutErrors = false;
                errorMessage = (new StringBuilder()).append("Invalid MRJ version: ").append(mrjVersion).toString();
            }
        } else
        if(osName.startsWith("Windows"))
        {
            if(osName.indexOf("9") != -1)
            {
                jvm = 6;
            } else
            {
                jvm = 5;
            }
        } else
        {
            jvm = -1;
        }
        if(loadedWithoutErrors)
        {
            loadedWithoutErrors = loadClasses();
        }
    }
}
