// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   TCSIO.java

package clad;

import java.io.PrintStream;
import java.util.*;

// Referenced classes of package clad:
//            Component, Logger, TaxaItem, TextOutputStream, 
//            LWEdge, Path, Distance

public class TCSIO
{

    protected static void printTaxa(Vector components, Logger Log)
    {
        for(Enumeration enumc = components.elements(); enumc.hasMoreElements();)
        {
            Component tempc = (Component)enumc.nextElement();
            Log.dprintln("tempc id: " + tempc.id);
            TaxaItem tempt;
            for(Enumeration enumt = tempc.taxa.elements(); enumt.hasMoreElements(); Log.dprintln("Data" + tempt.characters))
            {
                tempt = (TaxaItem)enumt.nextElement();
                Log.dprintln("tempt id: " + tempt.id);
                Log.dprintln("Name: " + tempt.name);
                Log.dprintln("Num Duplicates: " + tempt.numduplicates);
            }

        }

    }

    protected static void printGraph(String filename, Vector components, boolean distances, Logger Log, String maxWtaxa[], int maxNameLen, ArrayList edges)
    {
        Enumeration enumc = components.elements();
        int numNetworks = components.size() + 1;
        TaxaItem roots[] = new TaxaItem[numNetworks];
        int networkNum = 0;
        TextOutputStream out = new TextOutputStream(filename);
        out.println("graph [");
        out.println("directed 0");
        while(enumc.hasMoreElements()) 
        {
            Component tempc = (Component)enumc.nextElement();
            Enumeration enumt = tempc.taxa.elements();
            networkNum++;
            for(; enumt.hasMoreElements(); out.println("]"))
            {
                TaxaItem tempt = (TaxaItem)enumt.nextElement();
                if(distances)
                {
                    tempt.numduplicates = 0;
                }
                out.println("node [");
                out.println("   id " + tempt.id);
                if(tempt.isIntermediate)
                {
                    out.println("   label \" \"");
                    out.println("   graphics [");
                    out.println("   width 6.0");
                    out.println("   height 6.0");
                    out.println("   depth 1.0");
                    out.println("]");
                } else
                {
                    out.println("   label \"" + tempt.name + "\"");
                    out.println("   vgj [");
                    if(tempt.name.equalsIgnoreCase(maxWtaxa[networkNum]))
                    {
                        roots[networkNum] = tempt;
                        out.println("   shape  \"rectangle\"");
                    }
                    out.println("      labelPosition \"center\"");
                    out.println("   ]");
                    out.println("   graphics [");
                    int namesize = 9 * maxNameLen + tempt.numduplicates * 5;
                    out.println("   width " + namesize);
                    namesize = 20 + tempt.numduplicates * 5;
                    out.println("   height " + namesize);
                    out.println("   depth 20.0");
                    out.println("]");
                }
                out.println("   data [");
                out.println("    Frequency \"frequency=" + (tempt.numduplicates + 1));
                out.println(" " + tempt.name);
                String tempd;
                for(Enumeration enumd = tempt.dupnames.elements(); enumd.hasMoreElements(); out.println(" " + tempd))
                {
                    tempd = (String)enumd.nextElement();
                }

                out.println("\"");
                out.printf("    Weight \"outgroup weight= %6.2f", tempt.oweight);
                out.println("\"");
                out.println("    Sequence \"Sequence =");
                if(tempt.characters != null)
                {
                    out.println(new String(tempt.characters));
                }
                out.println("\"");
                out.println("   ]");
                out.println("   vgj [");
                out.println("      labelPosition \"center\"");
                out.println("   ]");
            }

            if(networkNum == 1)
            {
                printEdges(out, edges, Log);
            }
        }
        out.println("]");
        out.close();
    }

    private static void printEdges(TextOutputStream out, ArrayList myEdges, Logger myLog)
    {
        for(Iterator it = myEdges.iterator(); it.hasNext(); out.println("]"))
        {
            LWEdge edge = (LWEdge)it.next();
            String label = edge.path.getLabel();
            String changes = "";
            String ambig = "";
            if(label.length() != 0)
            {
                if(edge.path.edges.size() != edge.path.differences.size() || edge.path.source.isAmbiguous || edge.path.dest.isAmbiguous)
                {
                    ambig = "*";
                }
                int edgeIndex = edge.path.edges.indexOf(edge);
                if(edgeIndex >= edge.path.differences.size())
                {
                    changes = "";
                    label = "";
                } else
                {
                    int pos = ((Integer)edge.path.differences.get(edgeIndex)).intValue();
                    char s = edge.path.source.characters[pos];
                    char d = edge.path.dest.characters[pos];
                    TaxaItem temp = edge.source;
                    TaxaItem prev = edge.dest;
                    while(temp != edge.path.source && temp != edge.path.dest) 
                    {
                        if(temp.nbor.get(0) != prev)
                        {
                            prev = temp;
                            temp = (TaxaItem)temp.nbor.get(0);
                        } else
                        {
                            prev = temp;
                            temp = (TaxaItem)temp.nbor.get(1);
                        }
                    }
                    if(temp != edge.path.source)
                    {
                        char t = d;
                        d = s;
                        s = t;
                    }
                    int sid = edge.source.id;
                    int did = edge.dest.id;
                    changes = changes + (did <= sid ? d : s) + "\t" + (did <= sid ? s : d);
                    label = String.valueOf(pos + 1);
                }
            }
            out.println("edge [");
            out.println("   linestyle \"solid\"");
            out.println("   label \"" + ambig + label + "\"");
            out.println("   source " + edge.source.id);
            out.println("   target " + edge.dest.id);
            out.println("data [");
            out.println("Changes \"" + changes + "\"");
            out.println("]");
        }

        out.flush();
    }

    protected static void printHaplotypeList(Vector components, Logger Log)
    {
        Log.dprintln("\nHaplotype list:\n\n");
        for(Enumeration enumc = components.elements(); enumc.hasMoreElements();)
        {
            Component tempc = (Component)enumc.nextElement();
            for(Enumeration enumt = tempc.taxa.elements(); enumt.hasMoreElements(); Log.dprintln())
            {
                TaxaItem tempt = (TaxaItem)enumt.nextElement();
                Log.dprint(" - " + tempt.name + " : ");
                String tempd;
                for(Enumeration enumd = tempt.dupnames.elements(); enumd.hasMoreElements(); Log.dprint(" " + tempd))
                {
                    tempd = (String)enumd.nextElement();
                }

            }

        }

        Log.dprintln();
    }

    protected static boolean directAndPrintEdges(TextOutputStream out, TaxaItem root, Logger Log)
    {
        boolean isAmbig = false;
        root.levelNumber = 0;
        LinkedList queue = new LinkedList();
        queue.addLast(root);
        while(queue.size() > 0) 
        {
            TaxaItem cur = (TaxaItem)queue.removeFirst();
            cur.visited = true;
            Enumeration enumn = cur.nbor.elements();
            int numNeighbors = cur.nbor.size();
            for(int numEdges = 0; numEdges < numNeighbors; numEdges++)
            {
                TaxaItem tempn = (TaxaItem)enumn.nextElement();
                if(tempn.levelNumber == -1)
                {
                    tempn.levelNumber = cur.levelNumber + 1;
                }
                if(!tempn.visited)
                {
                    TaxaItem source = cur;
                    TaxaItem dest = tempn;
                    if(tempn.levelNumber == cur.levelNumber)
                    {
                        if(tempn.isIntermediate != cur.isIntermediate)
                        {
                            if(tempn.isIntermediate)
                            {
                                if(hasUnvisitedNeighbors(tempn))
                                {
                                    if(tempn.oweight > cur.oweight)
                                    {
                                        source = tempn;
                                        dest = cur;
                                    }
                                } else
                                {
                                    source = tempn;
                                    dest = cur;
                                }
                            } else
                            if(hasUnvisitedNeighbors(cur))
                            {
                                if(tempn.oweight > cur.oweight)
                                {
                                    source = tempn;
                                    dest = cur;
                                }
                            } else
                            {
                                dest = tempn;
                                source = cur;
                            }
                        } else
                        if(tempn.oweight > cur.oweight)
                        {
                            source = tempn;
                            dest = cur;
                        }
                    }
                    HashSet h1 = new HashSet(source.paths);
                    HashSet h2 = new HashSet(dest.paths);
                    h1.retainAll(h2);
                    Path p[] = new Path[0];
                    p = (Path[])h1.toArray(p);
                    String label = "";
                    if(p.length != 0)
                    {
                        label = p[0].getLabel();
                    } else
                    {
                        System.out.println("unknown path");
                    }
                    out.println("edge [");
                    out.println("   linestyle \"solid\"");
                    out.println("   label \"" + label + "\"");
                    out.println("   source " + source.id);
                    out.println("   target " + dest.id);
                    out.println("   data [");
                    out.println("      Changes \"" + label + "\"");
                    out.println("   ]");
                    out.println("]");
                    if(!queue.contains(tempn))
                    {
                        queue.addLast(tempn);
                    } else
                    {
                        isAmbig = true;
                    }
                }
            }

        }
        return isAmbig;
    }

    protected static boolean hasUnvisitedNeighbors(TaxaItem tempn)
    {
        Vector neig = tempn.nbor;
        for(int size = neig.size(); size > 0;)
        {
            TaxaItem temp = (TaxaItem)neig.get(--size);
            if(!temp.visited)
            {
                return true;
            }
        }

        return false;
    }

    protected static void printMatrix(Vector realtaxa, Logger Log)
    {
        int tabs = 0;
        int matrixdiff = 0;
        int matrixminus = 0;
        StringBuffer realDistLog = new StringBuffer("\n\nREAL ");
        StringBuffer computedDistLog = new StringBuffer("\n\nCOMPUTED FROM THE NETWORK ");
        StringBuffer diffDistLog = new StringBuffer("\n\nDIFFERENCE MATRIX \n");
        realDistLog.append("DISTANCE MATRIX\n");
        computedDistLog.append("DISTANCE MATRIX\n");
        realDistLog.append("pos:   ");
        computedDistLog.append("pos:   ");
        diffDistLog.append("pos:   ");
        int realTaxaIndex = 0;
        int numRealtaxa = realtaxa.size();
        TaxaItem tempt = (TaxaItem)realtaxa.get(realTaxaIndex);
        tabs = tempt.name.length() / 2;
        for(int i = 0; i < tabs; i++)
        {
            realDistLog.append("\t");
            computedDistLog.append("\t");
            diffDistLog.append("\t");
        }

        realDistLog.append(" ");
        computedDistLog.append(" ");
        diffDistLog.append(" ");
        while(realTaxaIndex < numRealtaxa) 
        {
            tempt = (TaxaItem)realtaxa.get(realTaxaIndex);
            realTaxaIndex++;
            realDistLog.append(" " + (tempt.id + 1) + " ");
            computedDistLog.append(" " + (tempt.id + 1) + " ");
            diffDistLog.append(" " + (tempt.id + 1) + " ");
        }
        realDistLog.append("\n");
        computedDistLog.append("\n");
        diffDistLog.append("\n");
        for(realTaxaIndex = 0; realTaxaIndex < numRealtaxa;)
        {
            int realTaxaIndex2 = 0;
            tempt = (TaxaItem)realtaxa.get(realTaxaIndex);
            realTaxaIndex++;
            realDistLog.append("[" + tempt.name + "]");
            computedDistLog.append("[" + tempt.name + "]");
            diffDistLog.append("[" + tempt.name + "]");
            realDistLog.append(Integer.toString(tempt.id + 1));
            computedDistLog.append(Integer.toString(tempt.id + 1));
            diffDistLog.append(Integer.toString(tempt.id + 1));
            if(tempt.id < 9)
            {
                realDistLog.append(" ");
                computedDistLog.append(" ");
                diffDistLog.append(" ");
            }
            realDistLog.append("\t:");
            computedDistLog.append("\t:");
            diffDistLog.append("\t:");
            while(realTaxaIndex2 < numRealtaxa) 
            {
                TaxaItem tempt2 = (TaxaItem)realtaxa.get(realTaxaIndex2);
                realTaxaIndex2++;
                if(tempt.id != tempt2.id)
                {
                    Distance dist = (Distance)tempt.realdist.get(tempt2.id);
                    Distance dist2 = (Distance)tempt.compdist.get(tempt2.id);
                    int diff = dist2.distance - dist.distance;
                    if(dist2.distance == 0x3b9aca00)
                    {
                        realDistLog.append(" ## ");
                        computedDistLog.append(" ## ");
                        diffDistLog.append(" ## ");
                    } else
                    {
                        realDistLog.append(" " + dist.distance + " ");
                        computedDistLog.append(" " + dist2.distance + " ");
                        diffDistLog.append(" " + diff + " ");
                        if(diff < 0)
                        {
                            matrixminus += diff;
                        } else
                        {
                            matrixdiff += diff;
                        }
                    }
                } else
                {
                    realDistLog.append(" -- ");
                    computedDistLog.append(" -- ");
                    diffDistLog.append(" -- ");
                }
            }
            realDistLog.append("\n");
            computedDistLog.append("\n");
            diffDistLog.append("\n");
        }

        diffDistLog.append("\nThe total positive difference matrix is " + (double)matrixdiff / 2D + "\n");
        diffDistLog.append("\nThe total negative difference matrix is " + (double)matrixminus / 2D + "\n");
        Log.dprintln(realDistLog.toString());
        Log.dprintln(computedDistLog.toString());
        Log.dprintln(diffDistLog.toString());
    }

    protected static void printcluster(Component tempc, Logger Log)
    {
        Enumeration enum1 = tempc.taxa.elements();
        Log.dprintln("cluster # " + tempc.id);
        TaxaItem tempt;
        for(; enum1.hasMoreElements(); Log.dprint("Taxa # " + tempt.id + "[" + tempt.name + "],"))
        {
            tempt = (TaxaItem)enum1.nextElement();
        }

        Log.dprintln("");
    }

    protected static void printclusters(Vector components, Logger Log)
    {
        for(Enumeration enum1 = components.elements(); enum1.hasMoreElements();)
        {
            Component tempc1 = (Component)enum1.nextElement();
            Log.dprintln();
            Log.dprintln("cluster # " + tempc1.id + " !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            Log.dprintln("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
            for(Enumeration enum2 = tempc1.taxa.elements(); enum2.hasMoreElements(); Log.dprintln())
            {
                TaxaItem tempt1 = (TaxaItem)enum2.nextElement();
                Log.dprintln("Taxa # " + tempt1.id + "[" + tempt1.name + "] compdist");
                Distance dist;
                for(Enumeration enum3 = tempt1.compdist.elements(); enum3.hasMoreElements(); Log.dprint("([" + dist.source + "," + dist.destination + "]=" + dist.distance + ")"))
                {
                    dist = (Distance)enum3.nextElement();
                }

                Log.dprintln();
                Log.dprintln("Taxa # " + tempt1.id + " realdist");
                Distance dist;
                for(Enumeration enum3 = tempt1.realdist.elements(); enum3.hasMoreElements(); Log.dprint("([" + dist.source + "," + dist.destination + "]=" + dist.distance + ")"))
                {
                    dist = (Distance)enum3.nextElement();
                }

                Log.dprintln();
                Log.dprintln("Taxa # " + tempt1.id + " metricdist");
                Distance dist;
                for(Enumeration enum3 = tempt1.metricdist.elements(); enum3.hasMoreElements(); Log.dprint("([" + dist.source + "," + dist.destination + "]=" + dist.distance + ")"))
                {
                    dist = (Distance)enum3.nextElement();
                }

                Log.dprintln();
                Log.dprintln("Taxa # " + tempt1.id + "Neighbors");
                TaxaItem tempt2;
                for(Enumeration enum3 = tempt1.nbor.elements(); enum3.hasMoreElements(); Log.dprint("(" + tempt2.id + "[" + tempt2.name + "]),"))
                {
                    tempt2 = (TaxaItem)enum3.nextElement();
                }

            }

            if(tempc1.mindist.dc != null)
            {
                Log.dprintln("mindist= " + tempc1.mindist.distance + " between " + tempc1.mindist.source + " in " + tempc1.id + " and " + tempc1.mindist.destination + " in " + tempc1.mindist.dc.id);
            }
        }

    }

    public TCSIO()
    {
    }
}
