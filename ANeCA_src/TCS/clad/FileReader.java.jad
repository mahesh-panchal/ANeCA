// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   FileReader.java

package clad;

import EDU.auburn.VGJ.gui.GraphWindow;
import java.awt.Window;
import java.io.PrintStream;
import java.util.*;
import javax.swing.JOptionPane;

// Referenced classes of package clad:
//            TextInputStream, Logger, TaxaItem, Component, 
//            Distance

public class FileReader
{

    public FileReader(GraphWindow gw, Logger log)
    {
        doingHaps = false;
        printseq = false;
        frame = gw;
        Log = log;
        components = new Vector();
        alltaxa = new Vector();
        realtaxa = new Vector();
        maxNameLen = 0;
        lines = false;
        missingString = "";
        warnMissing = false;
    }

    public void ReadInputFile(String infile, boolean gapmode)
    {
        in = new TextInputStream(infile);
        String line = in.readLine().toUpperCase();
        if(doingHaps)
        {
            ReadHaps(line);
        } else
        if(line.startsWith("#NEXUS"))
        {
            ReadNexus(gapmode);
        } else
        {
            ReadPhylip(line, gapmode);
        }
        in.close();
    }

    public void ReadDistanceFile(String infile)
    {
        in = new TextInputStream(infile);
        String line = in.readLine().toUpperCase();
        if(line.startsWith("#NEXUS"))
        {
            ReadNexusDis();
        } else
        {
            ReadPhylipDis(line);
        }
    }

    public void ReadHaps(String line)
    {
        int id = 0;
        Log.dprintln("\nData in HAPS format");
        while(!in.EOF()) 
        {
            String name = new String();
            String hap = new String();
            StringTokenizer reader = new StringTokenizer(line);
            name = reader.nextToken();
            hap = reader.nextToken();
            len = hap.length();
            int freq = Integer.parseInt(reader.nextToken());
            double confidence = Double.parseDouble(reader.nextToken());
            if(printseq)
            {
                Log.dprintln(name + " " + hap + " " + freq + " " + confidence);
            }
            TaxaItem temptaxa = new TaxaItem(name, len, id);
            temptaxa.resolved = true;
            maxNameLen = 4;
            temptaxa.name = name;
            temptaxa.confidence = confidence;
            temptaxa.numduplicates = freq - 1;
            for(int j = 0; j < len; j++)
            {
                char c = hap.charAt(j);
                c = Character.toUpperCase(c);
                temptaxa.characters[j] = c;
                if(printseq)
                {
                    System.err.print(c);
                }
                if(c == '\n' || c == '\r')
                {
                    JOptionPane.showMessageDialog(frame, "You have extra returns in sequence \"" + name + "\".", "TCS warning", 2);
                    frame.dispose();
                    in.close();
                    System.exit(0);
                }
                if(c == ' ')
                {
                    JOptionPane.showMessageDialog(frame, "The lenght of sequence \"" + name + "\"" + " is not " + len + ".", "TCS warning", 2);
                    frame.dispose();
                    in.close();
                    System.exit(0);
                }
                if(c != '1' && c != '2' && c != '?')
                {
                    JOptionPane.showMessageDialog(frame, "One of the characters in sequence \"" + name + "\" is not (12?).", "TCS warning", 2);
                    frame.dispose();
                    in.close();
                    System.exit(0);
                }
                if(in.EOF())
                {
                    JOptionPane.showMessageDialog(frame, "Unexpected end of file was encountered.", "TCS warning", 2);
                    frame.dispose();
                    in.close();
                    System.exit(0);
                }
            }

            Component tempc = new Component(id);
            tempc.taxa.add(temptaxa);
            temptaxa.parentComponent = tempc;
            alltaxa.add(temptaxa);
            realtaxa.add(temptaxa);
            id++;
            components.add(tempc);
            Log.dprintln("Added name: " + name, 1);
            try
            {
                line = in.readLine().toUpperCase();
                continue;
            }
            catch(Exception _ex) { }
            break;
        }
    }

    private void ReadMatrix(char c)
    {
        String names[] = new String[num];
        String nname = new String();
        distance = new int[num][num];
        maxNameLen = 0;
        Log.dprintln("\rI am reading this distance matrix:");
        for(int popA = 0; popA < num; popA++)
        {
            names[popA] = in.readWord();
            if(lines)
            {
                nname = String.valueOf(c);
                nname = nname.concat(names[0]);
                names[0] = nname;
                lines = false;
            }
            Log.dprint("\r" + names[popA] + "  ");
            if(names[popA] == null)
            {
                JOptionPane.showMessageDialog(frame, "There was an error reading the sequence names\nin the pairwise distance matrix", "TCS warning", 2);
                in.close();
                System.exit(0);
            }
            if(maxNameLen < names[popA].length())
            {
                maxNameLen = names[popA].length();
            }
            for(int popB = 0; popB < popA; popB++)
            {
                distance[popA][popB] = distance[popB][popA] = in.readInt();
                if(distance[popA][popB] < 1)
                {
                    JOptionPane.showMessageDialog(frame, "There was an error reading the distance matrix.\nAre you using absolute distances ?\nAre you inputing HAPLOTYPE distances (no zeroes in the matrix)? : " + distance[popA][popB], "TCS warning", 2);
                    in.close();
                    System.exit(0);
                }
                Log.dprint(" " + distance[popA][popB]);
            }

        }

        Log.dprintln();
        for(int cnt = 0; cnt < num; cnt++)
        {
            Component tempc = new Component(cnt);
            components.add(tempc);
            TaxaItem temptaxa = new TaxaItem(names[cnt], len, cnt);
            temptaxa.resolved = false;
            temptaxa.isIntermediate = false;
            tempc.taxa.add(temptaxa);
            temptaxa.parentComponent = tempc;
            alltaxa.add(temptaxa);
            realtaxa.add(temptaxa);
        }

        Enumeration enum1 = components.elements();
        Distance mindist = new Distance();
        while(enum1.hasMoreElements()) 
        {
            Component tempc1 = (Component)enum1.nextElement();
            TaxaItem tempt1 = (TaxaItem)tempc1.taxa.elementAt(0);
            tempc1.mindist.distance = 0x3b9aca00;
            Enumeration enum2 = components.elements();
            mindist.distance = 0x3b9aca00;
            while(enum2.hasMoreElements()) 
            {
                Component tempc2 = (Component)enum2.nextElement();
                TaxaItem tempt2 = (TaxaItem)tempc2.taxa.elementAt(0);
                Distance realdist = new Distance(tempc1.id, tempc2.id, 0);
                if(tempc1.id == tempc2.id)
                {
                    Distance tmpcdist = new Distance(tempc1.id, tempc2.id, 0, tempc1, tempc1);
                    Distance tmptdist = new Distance(tempt1.id, tempt2.id, 0, tempc1, tempc1);
                    Distance metricdist = new Distance(tempt1.id, tempt2.id, 0, tempc1, tempc1);
                    tmpcdist.dc = tempc1;
                    tmpcdist.sc = tempc1;
                    tmptdist.dc = tempc1;
                    tmptdist.sc = tempc1;
                    realdist.dc = tempc1;
                    realdist.sc = tempc1;
                    tempc1.compdist.add(tmpcdist);
                    tempt1.compdist.add(tmptdist);
                    tempt1.realdist.add(realdist);
                    tempt1.metricdist.add(metricdist);
                } else
                {
                    realdist.distance = distance[tempc1.id][tempc2.id];
                    Distance tmpcdist = new Distance(tempc1.id, tempc2.id, realdist.distance, tempc1, tempc2);
                    Distance tmptdist = new Distance(tempt1.id, tempt2.id, 0x3b9aca00, tempc1, tempc2);
                    Distance metricdist = new Distance(tempt1.id, tempt2.id, 0x3b9aca00, tempc1, tempc2);
                    tempc1.compdist.add(tmpcdist);
                    tempt1.compdist.add(tmptdist);
                    tempt1.realdist.add(realdist);
                    tempt1.metricdist.add(metricdist);
                    if(realdist.distance < mindist.distance)
                    {
                        mindist.distance = realdist.distance;
                        mindist.source = tempt1.id;
                        mindist.sc = tempc1;
                        mindist.destination = tempt2.id;
                        mindist.dc = tempc2;
                        Log.dprintln("min distance for " + tempc1.id + " = " + mindist.distance + " from " + mindist.source + " to " + mindist.destination, 32);
                    }
                }
            }
            Log.dprintln("final min distance for " + tempc1.id + " = " + mindist.distance + " from " + mindist.source + " to " + mindist.destination, 32);
            tempc1.mindist.clone(mindist);
            tempt1.minRealDist = mindist.distance;
        }
    }

    private void ReadNexus(boolean gapmode)
    {
        int cnt = 0;
        boolean missing = false;
        int IUPACcounter = 0;
        String name = new String();
        Log.dprintln("Data in NEXUS format");
        String token;
        for(token = in.readWord().toUpperCase(); !token.startsWith("NTAX="); token = in.readWord().toUpperCase()) { }
        StringTokenizer reader = new StringTokenizer(token, " =\n\r\t;");
        reader.nextToken();
        num = Integer.parseInt(reader.nextToken());
        for(; !token.startsWith("NCHAR="); token = in.readWord().toUpperCase()) { }
        reader = new StringTokenizer(token, " =\n\r\t;");
        reader.nextToken();
        len = Integer.parseInt(reader.nextToken());
        Log.dprintln("Number of sequences: " + num);
        Log.dprintln("Length of sequences: " + len);
        for(; !token.equals("MATRIX"); token = in.readWord().toUpperCase()) { }
        char c;
        for(c = in.readChar(); c == '\r' || c == '\n' || c == '\t';)
        {
            c = in.readChar();
            lines = true;
        }

        if(c == '[')
        {
            while((c = in.readChar()) != ']') ;
        }
        while(c == '\r' || c == '\n' || c == '\t' || c == ']' || c == ' ') 
        {
            c = in.readChar();
            lines = true;
            Log.dprintln(c);
        }
        for(int i = 0; i < num; i++)
        {
            if(lines)
            {
                String nname = String.valueOf(c);
                char d = in.readChar();
                if(d != ' ')
                {
                    nname = nname.concat(String.valueOf(d));
                    name = in.readWord();
                    nname = nname.concat(name);
	                }
                name = nname;
                lines = false;
            } else
            {
                name = in.readWord();
            }
            if(printseq)
            {
                Log.dprintln("\r" + (i + 1) + ". " + name);
            }
            TaxaItem temptaxa = new TaxaItem(name, len, cnt);
            temptaxa.resolved = true;
            temptaxa.isIntermediate = false;
            if(name.length() == 0)
            {
                name = in.readLine();
            }
            if(maxNameLen < name.length())
            {
                maxNameLen = name.length();
            }
            temptaxa.name = name;
            for(int j = 0; j < len; j++)
            {
                while((c = in.readChar()) == ' ') ;
                c = Character.toUpperCase(c);
                temptaxa.characters[j] = c;
                if(printseq)
                {
                    Log.dprint(String.valueOf(c));
                }
                if(c == '\n' || c == '\r')
                {
                    JOptionPane.showMessageDialog(frame, "You have extra returns in sequence \"" + name + "\".", "TCS warning", 2);
                    in.close();
                    frame.dispose();
                    System.exit(0);
                }
                if(c == ' ')
                {
                    JOptionPane.showMessageDialog(frame, "The length of sequence \"" + name + "\"" + " is not " + len + ".", "TCS warning", 2);
                    in.close();
                    System.exit(0);
                }
                if(c == 'R' || c == 'M' || c == 'W' || c == 'S' || c == 'K' || c == 'Y' || c == 'H' || c == 'V' || c == 'D' || c == 'B' || c == 'X' || c == 'N')
                {
                    c = '?';
                    temptaxa.characters[j] = c;
                    if(IUPACcounter == 0)
                    {
                        JOptionPane.showMessageDialog(frame, "Note that there are IUPAC ambiguity codes in the data: \"" + c + "\"" + "\n\nIUPAC codes: " + "\nM: A/C    S: G/C    H: A/C/T    B: C/G/T" + "\nR: A/G    K: G/T    V: A/C/G    X: A/C/G/T = ?" + "\nW: A/T    Y: C/T    D: A/G/T    N: A/C/G/T = ?" + "\n\nThey will be treated as missing data", "TCS information", 1);
                        IUPACcounter++;
                    }
                }
                if(c != 'A' && c != 'C' && c != 'G' && c != 'T' && c != '-' && c != '.' && c != '?')
                {
                    JOptionPane.showMessageDialog(frame, "One of the characters in sequence \"" + name + "\" is not (ACGCacgt.?-)." + "\nnor an IUPAC ambiguity code (RMWSKYHBVDXN)", "TCS warning", 2);
                    in.close();
                    System.exit(0);
                }
                if(in.EOF())
                {
                    JOptionPane.showMessageDialog(frame, "Unexpected end of file was encountered.", "TCS warning", 2);
                    in.close();
                    System.exit(0);
                }
            }

            Log.dprintln("Read data: " + temptaxa.characters, 1);
            in.readLine();
            int numdups = 0;
            for(Enumeration enumc = components.elements(); enumc.hasMoreElements();)
            {
                TaxaItem firsttaxa = (TaxaItem)((Component)components.get(0)).taxa.get(0);
                Component tempc = (Component)enumc.nextElement();
                Log.dprintln("looking at component: " + tempc.id, 1);
                boolean dup = true;
                TaxaItem tempt = (TaxaItem)tempc.taxa.elementAt(0);
                Log.dprintln("looking at taxa: " + tempt.id + " named " + tempt.name + "and" + temptaxa.id + " named " + temptaxa.name, 1);
                Log.dprintln("comparing " + tempt.characters, 1);
                Log.dprintln("with " + temptaxa.characters, 1);
                for(int k = 0; k < len; k++)
                {
                    char newc = temptaxa.characters[k];
                    char oldc = tempt.characters[k];
                    if(newc == '.')
                    {
                        newc = firsttaxa.characters[k];
                    }
                    if(oldc == '.')
                    {
                        oldc = firsttaxa.characters[k];
                    }
                    Log.dprint("[" + newc + "," + oldc + "]", 1);
                    if(!gapmode && (newc == '-' || oldc == '-'))
                    {
                        continue;
                    }
                    if(newc == '?' || oldc == '?')
                    {
                        missing = true;
                        continue;
                    }
                    if(newc == oldc)
                    {
                        continue;
                    }
                    dup = false;
                    break;
                }

                if(dup && missing)
                {
                    warnMissing = true;
                    missingString = missingString.concat(tempt.name + " and " + temptaxa.name + " differ only by missing or ambiguous characters\n");
                }
                Log.dprintln(1);
                if(dup)
                {
                    tempt.numduplicates++;
                    numdups++;
                    tempt.dupnames.add(temptaxa.name);
                    Log.dprintln("duplicate name: " + name + " duplicates " + tempt.numduplicates, 1);
                    break;
                }
            }

            if(numdups == 0)
            {
                Component tempc = new Component(cnt);
                tempc.taxa.add(temptaxa);
                temptaxa.parentComponent = tempc;
                alltaxa.add(temptaxa);
                realtaxa.add(temptaxa);
                cnt++;
                components.add(tempc);
                Log.dprintln("Added name: " + name, 1);
            }
        }

    }

    private void ReadNexusDis()
    {
        Log.dprintln("\rReading NEXUS distance file\r");
        String token;
        for(token = in.readWord().toUpperCase(); !token.startsWith("NTAX="); token = in.readWord().toUpperCase()) { }
        StringTokenizer reader = new StringTokenizer(token, " =\n\r\t;");
        reader.nextToken();
        num = Integer.parseInt(reader.nextToken());
        for(; !token.startsWith("NCHAR="); token = in.readWord().toUpperCase()) { }
        reader = new StringTokenizer(token, " =\n\r\t;");
        reader.nextToken();
        len = Integer.parseInt(reader.nextToken());
        if(Character.isDigit((char)num))
        {
            JOptionPane.showMessageDialog(frame, "ReadNexusDis > Problems reading the number of the sequences! : " + num, "TCS warning", 2);
            in.close();
            System.exit(0);
        }
        if(Character.isDigit((char)len))
        {
            JOptionPane.showMessageDialog(frame, "ReadNexusDis > Problems reading the length of the sequences! : " + len, "TCS warning", 2);
            in.close();
            System.exit(0);
        }
        Log.dprintln("Number of sequences: " + num);
        Log.dprintln("Length of sequences: " + len);
        for(; !token.equals("MATRIX"); token = in.readWord().toUpperCase()) { }
        char c;
        for(c = in.readChar(); c == '\r' || c == '\n' || c == '\t';)
        {
            c = in.readChar();
            lines = true;
        }

        if(c == '[')
        {
            while((c = in.readChar()) != ']') ;
        }
        while(c == '\r' || c == '\n' || c == '\t' || c == ']' || c == ' ') 
        {
            c = in.readChar();
            lines = true;
            Log.dprintln(c);
        }
        ReadMatrix(c);
        in.close();
    }

    private void ReadPhylip(String line, boolean gapmode)
    {
        boolean missing = false;
        int IUPACcounter = 0;
        int cnt = 0;
        boolean cr = false;
        Log.dprintln("\nData in PHYLIP format");
        StringTokenizer reader = new StringTokenizer(line);
        num = Integer.parseInt(reader.nextToken());
        len = Integer.parseInt(reader.nextToken());
        Log.dprintln("Number of sequences: " + num);
        Log.dprintln("Length of sequences: " + len);
        for(int i = 0; i < num; i++)
        {
            StringBuffer label = new StringBuffer();
            for(int k = 0; k < 10; k++)
            {
                char ch = in.readChar();
                if(ch == '\n' || ch == '\r')
                {
                    cr = true;
                    break;
                }
                label.append(ch);
            }

            String name = label.toString();
            if(printseq)
            {
                Log.dprintln("\n" + (i + 1) + ". " + name);
            }
            TaxaItem temptaxa = new TaxaItem(name, len, cnt);
            temptaxa.resolved = true;
            temptaxa.isIntermediate = false;
            if(name.length() == 0)
            {
                name = in.readLine();
            }
            if(maxNameLen < name.length())
            {
                maxNameLen = name.length();
            }
            temptaxa.name = name;
            for(int j = 0; j < len; j++)
            {
                char c = in.readChar();
                if(c == '\n' || c == '\r')
                {
                    c = in.readChar();
                }
                c = Character.toUpperCase(c);
                temptaxa.characters[j] = c;
                if(c == '\n' || c == '\r')
                {
                    JOptionPane.showMessageDialog(frame, "You have extra returns in sequence \"" + name + "\".", "TCS warning", 2);
                    in.close();
                    System.exit(0);
                }
                if(c == ' ')
                {
                    JOptionPane.showMessageDialog(frame, "The length of sequence \"" + name + "\"" + " is not " + len + ".", "TCS warning", 2);
                    in.close();
                    System.exit(0);
                }
                if(c == 'R' || c == 'M' || c == 'W' || c == 'S' || c == 'K' || c == 'Y' || c == 'H' || c == 'V' || c == 'D' || c == 'B' || c == 'X' || c == 'N')
                {
                    c = '?';
                    temptaxa.characters[j] = c;
                    if(IUPACcounter == 0)
                    {
                        JOptionPane.showMessageDialog(frame, "Note that there are IUPAC ambiguity codes in the data: \"" + c + "\"" + "\n\nIUPAC codes: " + "\nM: A/C    S: G/C    H: A/C/T    B: C/G/T" + "\nR: A/G    K: G/T    V: A/C/G    X: A/C/G/T = ?" + "\nW: A/T    Y: C/T    D: A/G/T    N: A/C/G/T = ?" + "\n\nThey will be treated as missing data", "TCS information", 1);
                        IUPACcounter++;
                    }
                }
                if(c != 'A' && c != 'C' && c != 'G' && c != 'T' && c != '-' && c != '.' && c != '?')
                {
                    JOptionPane.showMessageDialog(frame, "One of the characters in sequence \"" + name + "\" is not (ACGCacgt.?-)." + "\nnor an IUPAC ambiguity code (RMWSKYHBVDXN)", "TCS warning", 2);
                    in.close();
                    System.exit(0);
                }
                if(in.EOF())
                {
                    JOptionPane.showMessageDialog(frame, "Unexpected end of file was encountered.", "TCS warning", 2);
                    in.close();
                    System.exit(0);
                }
            }

            if(printseq)
            {
                Log.dprint(new String(temptaxa.characters));
            }
            Log.dprintln("Read data: " + temptaxa.characters, 1);
            in.readLine();
            int numdups = 0;
            for(Enumeration enumc = components.elements(); enumc.hasMoreElements();)
            {
                TaxaItem firsttaxa = (TaxaItem)((Component)components.get(0)).taxa.get(0);
                Component tempc = (Component)enumc.nextElement();
                Log.dprintln("looking at component: " + tempc.id, 1);
                boolean dup = true;
                TaxaItem tempt = (TaxaItem)tempc.taxa.elementAt(0);
                Log.dprintln("looking at taxa: " + tempt.id + " named " + tempt.name + "and" + temptaxa.id + " named " + temptaxa.name, 1);
                Log.dprintln("comparing " + tempt.characters, 1);
                Log.dprintln("with " + temptaxa.characters, 1);
                for(int k = 0; k < len; k++)
                {
                    char newc = temptaxa.characters[k];
                    char oldc = tempt.characters[k];
                    if(newc == '.')
                    {
                        newc = firsttaxa.characters[k];
                    }
                    if(oldc == '.')
                    {
                        oldc = firsttaxa.characters[k];
                    }
                    Log.dprint("[" + newc + "," + oldc + "]", 1);
                    if(!gapmode && (newc == '-' || oldc == '-'))
                    {
                        continue;
                    }
                    if(newc == '?' || oldc == '?')
                    {
                        missing = true;
                        continue;
                    }
                    if(newc == oldc)
                    {
                        continue;
                    }
                    dup = false;
                    break;
                }

                if(dup && missing)
                {
                    warnMissing = true;
                    missingString = missingString.concat(tempt.name + " and " + temptaxa.name + " differ only by missing or ambiguous characters\r");
                }
                Log.dprintln(1);
                if(dup)
                {
                    tempt.numduplicates++;
                    numdups++;
                    tempt.dupnames.add(temptaxa.name);
                    Log.dprintln("duplicate name: " + name + " duplicates " + tempt.numduplicates, 1);
                    break;
                }
            }

            if(numdups == 0)
            {
                Component tempc = new Component(cnt);
                tempc.taxa.add(temptaxa);
                temptaxa.parentComponent = tempc;
                alltaxa.add(temptaxa);
                realtaxa.add(temptaxa);
                cnt++;
                components.add(tempc);
                Log.dprintln("Added name: " + name, 1);
            }
        }

    }

    private void ReadPhylipDis(String line)
    {
        Log.dprintln("\rReading PHYLIP distance file\r");
        StringTokenizer reader = new StringTokenizer(line);
        num = Integer.parseInt(reader.nextToken());
        len = Integer.parseInt(reader.nextToken());
        if(Character.isDigit((char)num))
        {
            JOptionPane.showMessageDialog(frame, "ReadPhylipDis > Problems reading the number of the sequences! : " + num, "TCS warning", 2);
            in.close();
            System.exit(0);
        }
        if(Character.isDigit((char)len))
        {
            JOptionPane.showMessageDialog(frame, "ReadPhylipDis > Problems reading the length of the sequences! : " + len, "TCS warning", 2);
            in.close();
            System.exit(0);
        }
        Log.dprintln("Number of sequences: " + num);
        Log.dprintln("Length of sequences: " + len);
        ReadMatrix('a');
        in.close();
    }

    public int num;
    public int len;
    public int maxNameLen;
    public Vector components;
    public Vector alltaxa;
    public Vector realtaxa;
    public String missingString;
    public boolean warnMissing;
    public boolean doingHaps;
    private TextInputStream in;
    private GraphWindow frame;
    private int distance[][];
    private boolean lines;
    private boolean printseq;
    private Logger Log;
}
