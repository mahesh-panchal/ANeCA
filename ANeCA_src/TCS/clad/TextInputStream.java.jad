// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   TextInputStream.java

package clad;

import java.io.*;

public class TextInputStream
{

    public TextInputStream()
    {
        stdin = new BufferedReader(new InputStreamReader(System.in));
        missed = '\0';
        currchar = '\0';
        EOF = false;
    }

    public TextInputStream(String s)
    {
        try
        {
            stdin = new BufferedReader(new InputStreamReader(new FileInputStream(s)));
        }
        catch(FileNotFoundException _ex)
        {
            stdin = null;
        }
        missed = '\0';
        currchar = '\0';
        EOF = false;
    }

    public void close()
    {
        try
        {
            stdin.close();
        }
        catch(IOException _ex) { }
    }

    public boolean EOF()
    {
        return EOF;
    }

    public char readChar()
    {
        char s[] = new char[2];
        if(missed == 0)
        {
            try
            {
                if(stdin.read(s, 0, 1) == -1)
                {
                    EOF = true;
                }
            }
            catch(IOException _ex) { }
        } else
        {
            s[0] = missed;
            missed = '\0';
        }
        currchar = s[0];
        return s[0];
    }

    public double readDouble()
    {
        char s[] = new char[255];
        try
        {
            int length = readFloatString(s);
            return Double.valueOf(String.valueOf(s, 0, length)).doubleValue();
        }
        catch(IOException _ex)
        {
            return (0.0D / 0.0D);
        }
    }

    public float readFloat()
    {
        char s[] = new char[255];
        try
        {
            int length = readFloatString(s);
            return Float.valueOf(String.valueOf(s, 0, length)).floatValue();
        }
        catch(IOException _ex)
        {
            return (0.0F / 0.0F);
        }
    }

    int readFloatString(char s[])
        throws IOException
    {
        int state = 0;
        for(s[0] = missed; Character.isWhitespace(s[0]) || s[0] == 0;)
        {
            s[0] = readChar();
            if(EOF)
            {
                throw new EOFException();
            }
        }

        int i;
        for(i = 1; !Character.isWhitespace(s[i - 1]); i++)
        {
            switch(s[i - 1])
            {
            case 48: // '0'
            case 49: // '1'
            case 50: // '2'
            case 51: // '3'
            case 52: // '4'
            case 53: // '5'
            case 54: // '6'
            case 55: // '7'
            case 56: // '8'
            case 57: // '9'
                switch(state)
                {
                case 0: // '\0'
                case 1: // '\001'
                case 2: // '\002'
                case 4: // '\004'
                    state = 4;
                    break;

                case 3: // '\003'
                case 5: // '\005'
                    state = 5;
                    break;

                case 6: // '\006'
                case 7: // '\007'
                case 8: // '\b'
                case 9: // '\t'
                    state = 9;
                    break;

                default:
                    throw new IOException("Floating point format error1");
                }
                break;

            case 43: // '+'
                switch(state)
                {
                case 0: // '\0'
                    i--;
                    state = 1;
                    break;

                case 6: // '\006'
                    state = 8;
                    break;

                default:
                    throw new IOException("Floating point format error2");
                }
                break;

            case 45: // '-'
                switch(state)
                {
                case 0: // '\0'
                    state = 2;
                    break;

                case 6: // '\006'
                    state = 7;
                    break;

                default:
                    throw new IOException("Floating point format error3");
                }
                break;

            case 46: // '.'
                switch(state)
                {
                case 0: // '\0'
                case 1: // '\001'
                case 2: // '\002'
                case 4: // '\004'
                    state = 3;
                    break;

                case 3: // '\003'
                default:
                    throw new IOException("Floating point format error4");
                }
                break;

            case 101: // 'e'
                switch(state)
                {
                case 4: // '\004'
                case 5: // '\005'
                    state = 6;
                    break;

                default:
                    throw new IOException("Floating point format error5");
                }
                break;

            default:
                throw new IOException("Floating point format error6");
            }
            s[i] = readChar();
        }

        missed = s[i - 1];
        return i - 1;
    }

    public int readInt()
    {
        char s[] = new char[255];
        try
        {
            int length = readIntString(s);
            return Integer.valueOf(String.valueOf(s, 0, length)).intValue();
        }
        catch(IOException _ex)
        {
            return 0x80000000;
        }
    }

    int readIntString(char s[])
        throws IOException
    {
        int state = 0;
        for(s[0] = missed; Character.isWhitespace(s[0]) || s[0] == 0;)
        {
            s[0] = readChar();
            if(EOF)
            {
                throw new EOFException();
            }
        }

        int i;
        for(i = 1; !Character.isWhitespace(s[i - 1]); i++)
        {
            switch(s[i - 1])
            {
            case 48: // '0'
            case 49: // '1'
            case 50: // '2'
            case 51: // '3'
            case 52: // '4'
            case 53: // '5'
            case 54: // '6'
            case 55: // '7'
            case 56: // '8'
            case 57: // '9'
                switch(state)
                {
                case 0: // '\0'
                case 1: // '\001'
                case 2: // '\002'
                case 3: // '\003'
                    state = 3;
                    break;

                default:
                    throw new IOException("Integer format:Bad Start");
                }
                break;

            case 43: // '+'
                switch(state)
                {
                case 0: // '\0'
                    i--;
                    state = 1;
                    break;

                default:
                    throw new IOException("Integer format:+ sign wrong");
                }
                break;

            case 45: // '-'
                switch(state)
                {
                case 0: // '\0'
                    state = 2;
                    break;

                default:
                    throw new IOException("Integer format:- sign wrong");
                }
                break;

            case 44: // ','
            case 46: // '.'
            case 47: // '/'
            default:
                throw new IOException("Integer format error");
            }
            s[i] = readChar();
        }

        missed = s[i - 1];
        return i - 1;
    }

    public String readLine()
    {
        try
        {
            String s = stdin.readLine();
            missed = '\0';
            if(s == null)
            {
                EOF = true;
            }
            return s;
        }
        catch(IOException _ex)
        {
            return null;
        }
    }

    public String readWord()
    {
        char s[] = new char[255];
        for(s[0] = missed; Character.isWhitespace(s[0]) || s[0] == 0;)
        {
            s[0] = readChar();
            if(EOF)
            {
                return null;
            }
        }

        int i;
        for(i = 1; !Character.isWhitespace(s[i - 1]); i++)
        {
            s[i] = readChar();
        }

        missed = s[i - 1];
        return String.valueOf(s, 0, i - 1);
    }

    private BufferedReader stdin;
    char missed;
    char currchar;
    boolean EOF;
}
