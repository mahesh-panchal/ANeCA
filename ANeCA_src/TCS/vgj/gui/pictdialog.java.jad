// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   pictdialog.java

package EDU.auburn.VGJ.gui;

import EDU.auburn.VGJ.graph.Graph;
import java.awt.*;
import java.io.*;

// Referenced classes of package EDU.auburn.VGJ.gui:
//            LPanel, MessageDialog, GraphCanvas

public class pictdialog extends Dialog
{

    public pictdialog(Frame frame, GraphCanvas graph_canvas)
    {
        super(frame, "PICT Format Output", false);
        graphCanvas_ = graph_canvas;
        frame_ = frame;
        LPanel p = new LPanel();
        p.addLineLabel("Change no fields.  Press Save.  Works for PCs, and MACs!!!", 0);
        p.addLabel("Width", 1, 1, 0.0D, 1.0D, 0, 2);
        pWidth_ = p.addTextField("8.5", 8, 1, -1, 1.0D, 0.0D, 1, 1);
        p.addLabel("Height", 1, 1, 0.0D, 1.0D, 0, 2);
        pHeight_ = p.addTextField("11", 8, 0, -1, 1.0D, 0.0D, 1, 1);
        landscape_ = new Checkbox("Landscape", null, false);
        p.addComponent(landscape_, 0, -1, 0.0D, 1.0D, 0, 0);
        p.addLineLabel("System Print Command:", 0);
        printCmd_ = p.addTextField("/usr/ucb/lpr", 8, 0, -1, 1.0D, 1.0D, 1, 0);
        p.addButtonPanel("Save Close", 0);
        p.finish();
        add("Center", p);
    }

    public boolean Save(String filename)
    {
        if(filename == null)
        {
            FileDialog fd;
            try
            {
                fd = new FileDialog(frame_, "Save PICT File", 1);
                fd.setVisible(true);
            }
            catch(Throwable _ex)
            {
                MessageDialog dg = new MessageDialog(frame_, "Error", "It appears your VM does not allow file saving.", true);
                return true;
            }
            filename = fd.getFile();
            if(filename == null)
            {
                return true;
            }
            filename = fd.getDirectory() + filename;
        }
        try
        {
            RandomAccessFile out_ = new RandomAccessFile(filename, "rw");
            getPict_(out_);
        }
        catch(IOException f)
        {
            f.printStackTrace();
            return false;
        }
        return true;
    }

    public boolean action(Event event, Object object)
    {
        if(event.target instanceof Button)
        {
            if("Close".equals(object))
            {
                hide();
            } else
            {
                if("Save".equals(object))
                {
                    return Save(null);
                }
                if("Print".equals(object))
                {
                    File file = new File("vgj00.ps");
                    MessageDialog messagedialog;
                    try
                    {
                        PrintStream ps = new PrintStream(new FileOutputStream(file));
                        ps.close();
                        String cmd = new String(printCmd_.getText() + " " + "vgj00.ps");
                        Runtime.getRuntime().exec(cmd).waitFor();
                    }
                    catch(Exception e)
                    {
                        messagedialog = new MessageDialog(frame_, "Error", "Printing error: " + e.getMessage(), true);
                    }
                    try
                    {
                        file.delete();
                    }
                    catch(Exception _ex) { }
                }
            }
        } else
        if(event.target instanceof Checkbox)
        {
            String tmp = pWidth_.getText();
            String tmp2 = pHeight_.getText();
            pWidth_.setText(tmp2);
            pHeight_.setText(tmp);
        }
        return false;
    }

    private void getPict_(RandomAccessFile out_)
    {
        double width = 7.5D;
        double height = 10D;
        double p_width = 7.5D;
        double p_height = 7.5D;
        double fontsize = 10D;
        double margin = 0.5D;
        double overlap = 0.5D;
        boolean landscape = false;
        try
        {
            p_width = getVal_(pWidth_, "Paper Width", 1.0D, 1000000D);
            p_height = getVal_(pHeight_, "Paper Height", 1.0D, 1000000D);
        }
        catch(NumberFormatException _ex)
        {
            return;
        }
        if(width - margin * 2D < 1.0D)
        {
            new MessageDialog(frame_, "Error", "Width minus twice margin must be at least one inch.", true);
            return;
        }
        if(height - margin * 2D < 1.0D)
        {
            new MessageDialog(frame_, "Error", "Height minus twice margin must be at least one inch.", true);
            return;
        } else
        {
            landscape = landscape_.getState();
            graphCanvas_.toPict(width, height, p_width, p_height, fontsize, margin, overlap, landscape, out_);
            return;
        }
    }

    private double getVal_(TextField text, String name, double min, double max)
    {
        double result = 1.0D;
        try
        {
            result = Double.valueOf(text.getText()).doubleValue();
        }
        catch(NumberFormatException e)
        {
            result = 1.0D;
            String msg = "Bad format for " + name + ".";
            new MessageDialog(frame_, "Error", msg, true);
            throw e;
        }
        if(result < min)
        {
            String msg = name + " must be at least " + min + ".";
            new MessageDialog(frame_, "Error", msg, true);
            throw new NumberFormatException();
        }
        if(result > max)
        {
            String msg = name + " must be no more than " + max + ".";
            new MessageDialog(frame_, "Error", msg, true);
            throw new NumberFormatException();
        } else
        {
            return result;
        }
    }

    public boolean handleEvent(Event event)
    {
        if(event.id == 201)
        {
            hide();
            return true;
        } else
        {
            return super.handleEvent(event);
        }
    }

    private Graph graph_;
    private GraphCanvas graphCanvas_;
    private Frame frame_;
    private TextField width_;
    private TextField height_;
    private TextField pointSize_;
    private TextField margin_;
    private TextField pWidth_;
    private TextField pHeight_;
    private TextField overlap_;
    private TextField printCmd_;
    private Checkbox landscape_;
}
