// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   AngleControl.java

package EDU.auburn.VGJ.gui;

import EDU.auburn.VGJ.util.DPoint;
import java.awt.*;

// Referenced classes of package EDU.auburn.VGJ.gui:
//            DragFix

public class AngleControl extends Canvas
{

    public AngleControl(int width, int height)
    {
        width_ = -1;
        height_ = -1;
        mousedown_ = false;
        backImage_ = null;
        dragFix_ = new DragFix(this);
        preferredW_ = width;
        preferredH_ = height;
        theta_ = 0.0D;
        phi_ = 1.5707963267948966D;
        color_ = Color.white;
        font_ = new Font("Helvetica", 0, 12);
    }

    private void drawLabels_(Graphics graphics, boolean numbers)
    {
        FontMetrics fm = graphics.getFontMetrics();
        int thetadeg = (int)((theta_ * 180D) / 3.1415926535897931D);
        String thetastring = "theta";
        if(numbers)
        {
            thetastring = thetastring + " " + thetadeg;
        }
        graphics.drawString(thetastring, 2, height_ / 2 - 1);
        int phideg = (int)((phi_ * 180D) / 3.1415926535897931D);
        String phistring = "phi";
        if(numbers)
        {
            phistring = phistring + " " + phideg;
        }
        graphics.drawString(phistring, width_ / 2 + 1, fm.getAscent() + 2);
    }

    private void drawX_(Graphics graphics)
    {
        graphics.drawLine((int)markx_ - 3, (int)marky_ - 3, (int)markx_ + 3, (int)marky_ + 3);
        graphics.drawLine((int)markx_ - 3, (int)marky_ + 3, (int)markx_ + 3, (int)marky_ - 3);
    }

    double getPhi()
    {
        return phi_;
    }

    double getTheta()
    {
        return theta_;
    }

    public boolean handleEvent(Event e)
    {
        if(e.id == 0x2bd7f)
        {
            super.handleEvent((Event)e.arg);
            return true;
        } else
        {
            dragFix_.queueEvent(e);
            return true;
        }
    }

    public boolean mouseDown(Event e, int x, int y)
    {
        if(mousedown_)
        {
            return true;
        } else
        {
            mousedown_ = true;
            moveX_(x, y);
            return true;
        }
    }

    public boolean mouseDrag(Event e, int x, int y)
    {
        if(!mousedown_)
        {
            return true;
        } else
        {
            moveX_(x, y);
            return true;
        }
    }

    public boolean mouseUp(Event e, int x, int y)
    {
        mousedown_ = false;
        paintX_();
        getParent().postEvent(new Event(this, DONE, new DPoint(theta_, phi_)));
        return true;
    }

    private void moveX_(int x, int y)
    {
        if(x < 0)
        {
            x = 0;
        }
        if(x > width_ - 1)
        {
            x = width_ - 1;
        }
        if(y < 0)
        {
            y = 0;
        }
        if(y > height_ - 1)
        {
            y = height_ - 1;
        }
        markx_ = x;
        marky_ = y;
        theta_ = (markx_ / (double)(width_ - 1)) * 2D * 3.1415926535897931D - 3.1415926535897931D;
        phi_ = 1.5707963267948966D - (marky_ / (double)(height_ - 1)) * 3.1415926535897931D;
        paintX_();
        getParent().postEvent(new Event(this, ANGLE, new DPoint(theta_, phi_)));
    }

    public synchronized void paint(Graphics graphics)
    {
        graphics.dispose();
        paintOver();
    }

    public synchronized void paintOver()
    {
        Dimension winsize = size();
        if(winsize.width != width_ || winsize.height != height_)
        {
            width_ = winsize.width;
            height_ = winsize.height;
            recompute_();
            backImage_ = null;
        }
        if(backImage_ == null)
        {
            backImage_ = createImage(width_, height_);
        }
        Graphics graphics = backImage_.getGraphics();
        graphics.setFont(font_);
        graphics.setColor(color_);
        graphics.fillRect(0, 0, width_, height_);
        graphics.setColor(Color.black);
        graphics.setPaintMode();
        graphics.drawRect(0, 0, width_ - 1, height_ - 1);
        graphics.drawLine(width_ / 2, 0, width_ / 2, height_);
        graphics.drawLine(0, height_ / 2, width_, height_ / 2);
        drawLabels_(graphics, false);
        graphics.dispose();
        Graphics screen = getGraphics();
        screen.drawImage(backImage_, 0, 0, null);
        drawX_(screen);
        screen.setFont(font_);
        drawLabels_(screen, true);
        screen.dispose();
    }

    private synchronized void paintX_()
    {
        Graphics screen = getGraphics();
        screen.drawImage(backImage_, 0, 0, null);
        drawX_(screen);
        screen.setFont(font_);
        drawLabels_(screen, true);
        screen.dispose();
    }

    public Dimension preferredSize()
    {
        return new Dimension(preferredW_, preferredH_);
    }

    private void recompute_()
    {
        markx_ = ((theta_ + 3.1415926535897931D) / 6.2831853071795862D) * (double)width_;
        marky_ = ((1.5707963267948966D - phi_) / 3.1415926535897931D) * (double)height_;
    }

    public synchronized void removeNotify()
    {
        dragFix_.killThread();
        super.removeNotify();
    }

    void setAngles(double theta, double phi)
    {
        if(theta == theta_ && phi == phi_)
        {
            return;
        } else
        {
            theta_ = theta;
            phi_ = phi;
            recompute_();
            paintOver();
            return;
        }
    }

    void setColor(Color new_color)
    {
        color_ = new_color;
    }

    public static int ANGLE = 38779;
    public static int DONE = 38780;
    private int width_;
    private int height_;
    private double theta_;
    private double phi_;
    private double markx_;
    private double marky_;
    private int preferredW_;
    private int preferredH_;
    private Color color_;
    private boolean mousedown_;
    private DragFix dragFix_;
    private Image backImage_;
    private Font font_;

}
