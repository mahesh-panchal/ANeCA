// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   GraphWindow.java

package EDU.auburn.VGJ.gui;

import EDU.auburn.VGJ.algorithm.GraphAlgorithm;
import EDU.auburn.VGJ.graph.*;
import EDU.auburn.VGJ.util.DDimension;
import EDU.auburn.VGJ.util.DPoint;
import clad.*;
import java.awt.*;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URL;
import java.util.Hashtable;
import java.util.StringTokenizer;
import javax.swing.*;
import javax.swing.text.JTextComponent;

// Referenced classes of package EDU.auburn.VGJ.gui:
//            GraphCanvas, GroupControl, AlgPropDialog, FontPropDialog, 
//            GraphEdit, PSdialog, ScrolledPanel, ViewportScroller, 
//            MessageDialog, AngleControlPanel, LPanel, pictdialog

public class GraphWindow extends JFrame
{

    public GraphWindow(Graph graphIn)
    {
        run_button = new Button("RUN");
        changes_button = new Button("Show changes");
        manualConnections = new JTextField(5);
        cancel = false;
        gapmode = true;
        GMLfile_ = null;
        algPropDialog_ = null;
        doDistances = false;
        fd2 = null;
        filename_ = null;
        fontPropDialog_ = null;
        edgeFontPropDialog_ = null;
        groupControl_ = null;
        pictDialog_ = null;
        psDialog_ = null;
        scale_ = 1.0D;
        construct(graphIn);
    }

    public GraphWindow(boolean directed)
    {
        run_button = new Button("RUN");
        changes_button = new Button("Show changes");
        manualConnections = new JTextField(5);
        cancel = false;
        gapmode = true;
        GMLfile_ = null;
        algPropDialog_ = null;
        doDistances = false;
        fd2 = null;
        filename_ = null;
        fontPropDialog_ = null;
        edgeFontPropDialog_ = null;
        groupControl_ = null;
        pictDialog_ = null;
        psDialog_ = null;
        scale_ = 1.0D;
        construct(new Graph(directed));
    }

    public void setMaxDistance(int distance)
    {
        tcs.setMaxDistance(distance);
    }

    public void pictSave(String filename)
    {
        pictDialog_ = GraphIO.pictSave(false, filename, graphCanvas_, this, pictDialog_);
    }

    public void runTCS()
    {
        tcs.runTCS(filename, outfile, true, doDistances, logfile);
    }

    public boolean open(String fileToRun)
    {
        tcs = new TCS();
        filename = fileToRun;
        outfile = fileToRun.concat(".graph");
        logfile = fileToRun.concat(".log");
        return true;
    }

    public void saveStandard(String filename)
    {
        GMLfile_ = GraphIO.saveStandard(true, filename, graphCanvas_, this, GMLfile_, graph_, tcs);
    }

    public boolean action(Event event, Object what)
    {
        if(event.target instanceof Choice)
        {
            Choice choice = (Choice)event.target;
            String label = choice.getSelectedItem();
            if(label.equals("Gaps = 5th state"))
            {
                gapmode = true;
            } else
            if(label.equals("Gaps = missing"))
            {
                gapmode = false;
            }
            int mode = 4;
            if(label.equals("Create Branches"))
            {
                mode = 1;
            } else
            if(label.equals("Create Nodes"))
            {
                mode = 0;
            } else
            if(label.equals("Select Branches"))
            {
                mode = 3;
            } else
            if(label.equals("Select Nodes"))
            {
                mode = 2;
            } else
            if(label.equals("Select Nodes & Branches"))
            {
                mode = 4;
            }
            graphCanvas_.setMouseMode(mode);
        }
        if(event.target instanceof Checkbox)
        {
            CheckboxGroup cbgrp = ((Checkbox)event.target).getCheckboxGroup();
            Checkbox selected = cbgrp.getSelectedCheckbox();
            String label = selected.getLabel();
            if(label.equals("Fix Connection Limit At "))
            {
                conLimit.setEnabled(false);
                manualConnections.setEnabled(true);
            } else
            {
                conLimit.setEnabled(true);
                manualConnections.setEnabled(false);
            }
        } else
        if(event.target instanceof CheckboxMenuItem)
        {
            String label = ((CheckboxMenuItem)event.target).getLabel();
            boolean state = ((CheckboxMenuItem)event.target).getState();
            if(label.equals("Scale Node Size"))
            {
                graphCanvas_.scaleBounds(state);
            } else
            if(label.equals("Show Controls  [s]"))
            {
                controls_.setVisible(state);
                validate();
            } else
            if(label.equals("Directed"))
            {
                graphCanvas_.setDirected(state);
            } else
            if(label.equals("Use Node ID As Default Label"))
            {
                Node.setDefaultLabel(state);
                graphCanvas_.update(false);
            } else
            if(label.equals("High Quality Display"))
            {
                graphCanvas_.setQuality(state ? 2 : 1);
            }
        } else
        if(event.target instanceof MenuItem)
        {
            MenuItem menuitem = (MenuItem)event.target;
            GraphAlgorithm alg = (GraphAlgorithm)algHashTable_.get(menuitem);
            if(alg != null)
            {
                applyAlgorithm_(alg);
            } else
            {
                String label = menuitem.getLabel();
                if(label.equals("Help"))
                {
                    try
                    {
                        BrowserLauncher.openURL("file://" + System.getProperty("user.dir") + TCS.docTCS);
                    }
                    catch(IOException exc)
                    {
                        exc.printStackTrace();
                    }
                } else
                if(label.equals("Citation"))
                {
                    JFrame frame = new JFrame();
                    JOptionPane.showMessageDialog(frame, "Clement M, Posada D, Crandall KA. 2000\nTCS: a computer program to estimate gene genealogies\nMolecular Ecology 9 (10): 1657-1660", "TCS citation", 1);
                    frame.dispose();
                } else
                if(label.equals("TCS web site"))
                {
                    try
                    {
                        BrowserLauncher.openURL(TCS.urlTCS);
                    }
                    catch(IOException exc)
                    {
                        exc.printStackTrace();
                    }
                } else
                if(label.equals("Credits"))
                {
                    JFrame frame = new JFrame();
                    JOptionPane.showMessageDialog(frame, "TCS has been developed by:\n   Mark Clement  -- Computer Science@BYU\n   Jacob Derington -- Computer Science @BYU\n   Steven Woolley -- Biology @Washington University\n   David Posada -- Genetics@University of Vigo (Spain)\n\nTCS uses the freeware VGLJ for graph display and manipulation and GUI architecture\n   http://www.eng.auburn.edu/department/cse/research/graph_drawing/graph_drawing.html\n   VGJ may be distributed under the terms of the GNU General Public License, Version 2\n\nTCS uses the BrowserLauncher version 1.4b1 class by Eric Albert\n\nThanks to all the users for reporting problems !\n", "TCS credits", 1);
                    frame.dispose();
                } else
                if(label.equals("Open Graph (GML)"))
                {
                    filename_ = GraphIO.openGMLGraph(this, GMLfile_, graph_, graphCanvas_);
                    setTitle_();
                    if(filename_ != null)
                    {
                        GMLobject GMLo = GraphIO.loadFile(filename_, GMLfile_, this, graph_, graphCanvas_);
                        if(GMLo != null)
                        {
                            tcs = new TCS(this);
                            tcs.fillTaxaInfo(GMLo);
                            GMLfile_ = GMLo;
                            choicesel.setEnabled(true);
                            if(!doDistances)
                            {
                                changes_button.setEnabled(true);
                            }
                            run_button.setEnabled(false);
                            choicegaps.setEnabled(false);
                            cb.setEnabled(false);
                            conLimit.setEnabled(false);
                            manualBox.setEnabled(false);
                        } else
                        {
                            return false;
                        }
                    } else
                    {
                        System.err.print("filename not valid!");
                    }
                } else
                {
                    if(label.equals("Select NEXUS/PHYLIP Sequence file"))
                    {
                        tcs = new TCS(this);
                        if((filename = GraphIO.getFileName(label, tcs, this)) != null)
                        {
                            String GUI_infile = "";
                            String token = "";
                            if(TCS.currentOS == "windows")
                            {
                                token = "\\";
                            } else
                            {
                                token = "/";
                            }
                            for(StringTokenizer st = new StringTokenizer(filename, token); st.hasMoreTokens();)
                            {
                                GUI_infile = st.nextToken();
                            }

                            infilelabel.setText("  " + GUI_infile + "  ");
                            progressBar.setValue(0);
                            calcLimitLabel.setText("Connection Limit      ");
                            outfile = filename;
                            outfile = outfile.concat(".graph");
                            run_button.setEnabled(true);
                            doDistances = false;
                            return true;
                        } else
                        {
                            return false;
                        }
                    }
                    if(label.equals("Select NEXUS/PHYLIP Distance file"))
                    {
                        tcs = new TCS(this);
                        filename = GraphIO.getFileName(label, tcs, this);
                        String GUI_infile = "";
                        for(StringTokenizer st = new StringTokenizer(filename, "/"); st.hasMoreTokens();)
                        {
                            GUI_infile = st.nextToken();
                        }

                        infilelabel.setText("  " + GUI_infile + "  ");
                        progressBar.setValue(0);
                        calcLimitLabel.setText("Connection Limit      ");
                        outfile = filename;
                        outfile = outfile.concat(".graph");
                        doDistances = true;
                        if(filename == null)
                        {
                            JOptionPane.showMessageDialog(this, "Cannot open distance file", "TCS warning", 2);
                            return false;
                        } else
                        {
                            run_button.setEnabled(true);
                            cb.setEnabled(false);
                            conLimit.setEnabled(false);
                            manualBox.setEnabled(false);
                            choicegaps.setEnabled(false);
                            return true;
                        }
                    }
                    if(label.equals("Save Graph (GML)") || label.equals("Save Graph As (GML)"))
                    {
                        GMLobject gmlgraph = new GMLobject("graph", 3);
                        graph_.setGMLvalues(gmlgraph);
                        gmlgraph.prune();
                        GMLfile_ = gmlgraph;
                        filename_ = GraphIO.saveGML(label, filename_, GMLfile_, this, graph_);
                        setTitle_();
                        if(filename_ != null)
                        {
                            tcs = new TCS(this);
                            tcs.fillTaxaInfo(gmlgraph);
                        }
                    } else
                    if(label.equals("Exit This Window"))
                    {
                        destroy();
                    } else
                    if(label.equals("Delete Selected Items"))
                    {
                        graphCanvas_.deleteSelected(true);
                    } else
                    if(label.equals("Select All"))
                    {
                        graphCanvas_.selectAll();
                    } else
                    if(label.equals("Select Root"))
                    {
                        graphCanvas_.selectRoot();
                    } else
                    if(label.equals("Remove All Edge Bends"))
                    {
                        graphCanvas_.removeEdgeBends();
                    } else
                    if(label.equals("Remove All Groups"))
                    {
                        graphCanvas_.removeGroups();
                    } else
                    if(label.equals("Group Control"))
                    {
                        if(groupControl_ == null)
                        {
                            groupControl_ = new GroupControl(this, graphCanvas_);
                        } else
                        {
                            groupControl_.showMe();
                        }
                    } else
                    if(label.equals("Set New Node Properties"))
                    {
                        graphCanvas_.setNodeProperties(true);
                    } else
                    if(label.equals("Set Node Spacing"))
                    {
                        if(algPropDialog_ == null)
                        {
                            algPropDialog_ = new AlgPropDialog(this, graphCanvas_);
                        } else
                        {
                            algPropDialog_.showMe();
                        }
                    } else
                    if(label.equals("Set Node Label Font"))
                    {
                        if(fontPropDialog_ == null)
                        {
                            fontPropDialog_ = new FontPropDialog(this, graphCanvas_, true);
                        }
                        fontPropDialog_.showMe();
                    } else
                    if(label.equals("Set Edge Label Font"))
                    {
                        if(edgeFontPropDialog_ == null)
                        {
                            edgeFontPropDialog_ = new FontPropDialog(this, graphCanvas_, false);
                        }
                        edgeFontPropDialog_.showMe();
                    } else
                    if(label.equals("Edit Text Representation (GML)"))
                    {
                        graphCanvas_.unselectItems();
                        GraphEdit ge = new GraphEdit(graph_, graphCanvas_);
                        ge.pack();
                        ge.setVisible(true);
                    } else
                    if(label.equals("Save network as PostScript"))
                    {
                        if(psDialog_ == null)
                        {
                            psDialog_ = new PSdialog(this, graphCanvas_);
                        } else
                        {
                            psDialog_.pack();
                            psDialog_.setVisible(true);
                        }
                    } else
                    if(label.equals("Save network as PICT"))
                    {
                        pictDialog_ = GraphIO.pictSave(true, null, graphCanvas_, this, pictDialog_);
                    }
                }
            }
        } else
        if(event.target instanceof Button)
        {
            if(((String)what).equals("Scale / 1.25"))
            {
                scale_ /= 1.25D;
                graphCanvas_.setScale(scale_);
                scaleLabel_.setText("Scale: " + scale_);
            } else
            if(((String)what).equals("Scale * 1.25"))
            {
                scale_ *= 1.25D;
                graphCanvas_.setScale(scale_);
                scaleLabel_.setText("Scale: " + scale_);
            } else
            if(((String)what).equals("Scale = 1"))
            {
                scale_ = 1.0D;
                graphCanvas_.setScale(scale_);
                scaleLabel_.setText("Scale: " + scale_);
            } else
            if(((String)what).equals("Center"))
            {
                DDimension port_dim = viewingPanel_.getPortSize();
                DDimension cont_dim = viewingPanel_.getContentSize();
                double x = (cont_dim.width - port_dim.width) / 2D;
                double y = (cont_dim.height - port_dim.height) / 2D;
                viewingPanel_.scrollTo((int)x, (int)y);
                portScroller_.setOffset(x, y);
            } else
            if(((String)what).equals("RUN"))
            {
                boolean graphExists = tcs.runTCS(filename, outfile, gapmode, doDistances, outfile + ".log");
                if(graphExists)
                {
                    filename_ = outfile;
                    GMLfile_ = GraphIO.loadFile(outfile, GMLfile_, this, graph_, graphCanvas_);
                    setTitle_();
                    graphCanvas_.selectRoot();
                    applyAlgorithm("Tree Down");
                    run_button.setEnabled(false);
                    choicegaps.setEnabled(false);
                    cb.setEnabled(false);
                    conLimit.setEnabled(false);
                    manualBox.setEnabled(false);
                    choicesel.setEnabled(true);
                    if(!doDistances)
                    {
                        changes_button.setEnabled(true);
                    }
                    GMLfile_ = GraphIO.saveStandard(false, filename_, graphCanvas_, this, GMLfile_, graph_, tcs);
                    fd2 = null;
                } else
                {
                    System.exit(0);
                }
            } else
            if(((String)what).equals("STOP"))
            {
                hide();
                cancel = true;
            } else
            if(((String)what).equals("Show changes"))
            {
                Edge.setDefaultLabel(true);
                graphCanvas_.update(false);
                changes_button.setLabel("Hide changes");
            } else
            if(((String)what).equals("Hide changes"))
            {
                Edge.setDefaultLabel(false);
                graphCanvas_.update(false);
                changes_button.setLabel("Show changes");
            }
        }
        return true;
    }

    public void addAlgorithm(GraphAlgorithm alg, String name)
    {
        MenuItem menuitem = new MenuItem(name);
        algorithmMenu_.add(menuitem);
        algHashTable_.put(menuitem, alg);
        algNameHashTable_.put(name, alg);
    }

    public void addAlgorithm(GraphAlgorithm alg, String menuname, String name)
    {
        Menu menu = (Menu)menuHashTable_.get(menuname);
        if(menu == null)
        {
            return;
        } else
        {
            MenuItem menuitem = new MenuItem(name);
            menu.add(menuitem);
            algHashTable_.put(menuitem, alg);
            algNameHashTable_.put(menuname + "." + name, alg);
            return;
        }
    }

    public void addAlgorithmMenu(String name)
    {
        Menu menu = new Menu(name);
        algorithmMenu_.add(menu);
        menuHashTable_.put(name, menu);
    }

    public void applyAlgorithm(String name)
    {
        GraphAlgorithm alg = (GraphAlgorithm)algNameHashTable_.get(name);
        if(alg != null)
        {
            applyAlgorithm_(alg);
        }
    }

    public void applyAlgorithm_(GraphAlgorithm alg)
    {
        if(graph_.numberOfNodes() < 1)
        {
            new MessageDialog(this, "Error", "Graph is empty.", true);
        } else
        {
            graph_.removeGroups();
            graph_.pack();
            graphCanvas_.setWireframe(true);
            String msg = alg.compute(graph_, graphCanvas_);
            graphCanvas_.setWireframe(false);
            if(msg != null)
            {
                new MessageDialog(this, "Message", msg, true);
            }
            graphCanvas_.update(true);
        }
    }

    public boolean handleEvent(Event event)
    {
        if(event.target instanceof ScrolledPanel)
        {
            if(event.id == ScrolledPanel.RESIZE)
            {
                DDimension tmp_dim = viewingPanel_.getPortSize();
                portScroller_.setPortSize(tmp_dim.width, tmp_dim.height);
                tmp_dim = viewingPanel_.getContentSize();
                portScroller_.setContentSize(tmp_dim.width, tmp_dim.height);
                tmp_dim = viewingPanel_.getOffset();
                portScroller_.setOffset(tmp_dim.width, tmp_dim.height);
                return true;
            }
            if(event.id == ScrolledPanel.OFFSET)
            {
                DDimension tmp_dim = viewingPanel_.getOffset();
                portScroller_.setOffset(tmp_dim.width, tmp_dim.height);
                return true;
            }
        } else
        if(event.target instanceof ViewportScroller)
        {
            if(event.id == ViewportScroller.SCROLL)
            {
                graphCanvas_.setWireframe(true);
                viewingPanel_.scrollTo((int)portScroller_.getOffsetX(), (int)portScroller_.getOffsetY());
            }
            if(event.id == ViewportScroller.DONE)
            {
                graphCanvas_.setWireframe(false);
                viewingPanel_.scrollTo((int)portScroller_.getOffsetX(), (int)portScroller_.getOffsetY());
            }
        } else
        if(event.target instanceof AngleControlPanel)
        {
            if(event.id == AngleControlPanel.ANGLE)
            {
                DPoint angles = (DPoint)event.arg;
                graphCanvas_.setWireframe(true);
                graphCanvas_.setViewAngles(angles.x, angles.y);
            }
            if(event.id == AngleControlPanel.DONE)
            {
                DPoint angles = (DPoint)event.arg;
                graphCanvas_.setWireframe(false);
                graphCanvas_.setViewAngles(angles.x, angles.y);
            }
        } else
        if(event.target instanceof GraphCanvas)
        {
            if(event.id == 38792)
            {
                cbmiDirected_.setState(graph_.isDirected());
            }
        } else
        if(event.id == 201)
        {
            destroy();
            return false;
        }
        return super.handleEvent(event);
    }

    public boolean keyDown(Event e, int key)
    {
        if(e.id == 401)
        {
            if(key == 115)
            {
                showControls_.setState(showControls_.getState() ^ true);
            } else
            {
                graphCanvas_.keyDown(e, key);
            }
            if(showControls_.getState())
            {
                controls_.setVisible(true);
            } else
            {
                controls_.setVisible(false);
            }
            validate();
        }
        return false;
    }

    public void selectNode(int node_index)
    {
        graphCanvas_.selectNode(node_index);
    }

    private void setTitle_()
    {
        if(filename_ != null)
        {
            setTitle("TCS v1.21:   " + filename_);
        }
    }

    private void destroy()
    {
        dispose();
    }

    private void construct(Graph graph_in)
    {
        algHashTable_ = new Hashtable();
        algNameHashTable_ = new Hashtable();
        menuHashTable_ = new Hashtable();
        Font guiFont = new Font("Charcoal", 0, 11);
        boolean directed = graph_in.isDirected();
        MenuBar menubar = new MenuBar();
        Menu menu = new Menu("File");
        Menu TCSmenu = new Menu("TCS");
        menu.add(new MenuItem("-"));
        menu.add(new MenuItem("Select NEXUS/PHYLIP Sequence file"));
        menu.add(new MenuItem("-"));
        menu.add(new MenuItem("Select NEXUS/PHYLIP Distance file"));
        menu.add(new MenuItem("-"));
        menu.add(new MenuItem("Open Graph (GML)"));
        menu.add(new MenuItem("Save Graph (GML)"));
        menu.add(new MenuItem("Save Graph As (GML)"));
        menu.add(new MenuItem("-"));
        menu.add(new MenuItem("Save network as PostScript"));
        menu.add(new MenuItem("Save network as PICT"));
        menu.add(new MenuItem("-"));
        menu.add(new MenuItem("-"));
        menu.add(new MenuItem("Exit This Window"));
        menubar.add(menu);
        algorithmMenu_ = new Menu("Tree");
        menubar.add(algorithmMenu_);
        TCSmenu.add(new MenuItem("Help"));
        TCSmenu.add(new MenuItem("Citation"));
        TCSmenu.add(new MenuItem("TCS web site"));
        TCSmenu.add(new MenuItem("Credits"));
        menubar.add(TCSmenu);
        menu = new Menu("Edit Graph");
        menu.add(new MenuItem("Select All"));
        menu.add(new MenuItem("Select Root"));
        menu.add(new MenuItem("Delete Selected Items"));
        menu.add(new MenuItem("Remove All Edge Bends"));
        menu.add(new MenuItem("Remove All Groups"));
        menu.add(new MenuItem("Group Control"));
        menu.add(new MenuItem("Edit Text Representation (GML)"));
        menubar.add(menu);
        menu = new Menu("Properties");
        progressBar = new JProgressBar(0, 100);
        progressBar.setFont(guiFont);
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        showControls_ = new CheckboxMenuItem("Show Controls  [s]");
        showControls_.setState(true);
        menu.add(showControls_);
        CheckboxMenuItem cbmi = new CheckboxMenuItem("Directed");
        cbmiDirected_ = cbmi;
        if(directed)
        {
            cbmi.setState(true);
        }
        menu.add(cbmi);
        menu.add(new MenuItem("Set New Node Properties"));
        menu.add(new MenuItem("Set Node Spacing"));
        menu.add(new MenuItem("Set Node Label Font"));
        menu.add(new MenuItem("Set Edge Label Font"));
        cbmi = new CheckboxMenuItem("Scale Node Size");
        cbmi.setState(true);
        menu.add(cbmi);
        cbmi = new CheckboxMenuItem("Use Node ID As Default Label");
        cbmi.setState(true);
        menu.add(cbmi);
        cbmi = new CheckboxMenuItem("High Quality Display");
        cbmi.setState(true);
        menu.add(cbmi);
        menubar.add(menu);
        setMenuBar(menubar);
        getContentPane().setLayout(new BorderLayout());
        p = new LPanel();
        p.setFont(guiFont);
        p.setForeground(Color.black);
        p.setBorder(BorderFactory.createEtchedBorder());
        p.addLineLabel("TCS CLADOGRAM ESTIMATION", 0);
        JPanel runp = new JPanel();
        runp.setFont(guiFont);
        run_button.setFont(guiFont);
        run_button.setEnabled(false);
        runp.add(run_button, "West");
        infilelabel = new Label(" No input file                ");
        runp.add(infilelabel, "Center");
        p.addComponent(runp, 1, -1, 1.0D, 1.0D, 0, 0);
        p.addLineLabel("", 0);
        p.addComponent(progressBar, 1, -1, 1.0D, 1.0D, 0, 0);
        p.addLineLabel("", 0);
        JPanel first = new JPanel();
        first.setFont(guiFont);
        CheckboxGroup mode_group = new CheckboxGroup();
        cb = new Checkbox("Calculate", mode_group, true);
        cb.setFont(guiFont);
        first.add(cb, "West");
        conLimit = new Choice();
        conLimit.setFont(guiFont);
        for(int values = 90; values < 100; values++)
        {
            conLimit.addItem(values + "%");
        }

        first.add(conLimit, "Center");
        conLimit.select(5);
        calcLimitLabel = new Label("Connection Limit");
        calcLimitLabel.setFont(new Font("Charcoal", 0, 11));
        first.add(calcLimitLabel, "East");
        p.addComponent(first, 1, -1, 1.0D, 1.0D, 0, 0);
        p.addLineLabel("", 0);
        JPanel second = new JPanel();
        second.setFont(guiFont);
        manualBox = new Checkbox("Fix Connection Limit At ", mode_group, false);
        manualBox.setFont(guiFont);
        second.add(manualBox, "West");
        second.add(manualConnections, "Center");
        second.add(new Label("steps"), "East");
        p.addComponent(second, 1, -1, 1.0D, 1.0D, 0, 0);
        p.addLineLabel("", 0);
        manualConnections.setEnabled(false);
        choicegaps = new Choice();
        choicegaps.setFont(guiFont);
        choicegaps.addItem("Gaps = 5th state");
        choicegaps.addItem("Gaps = missing");
        p.addComponent(choicegaps, 1, -1, 1.0D, 1.0D, 0, 0);
        p.addLineLabel("", 0);
        choicesel = new Choice();
        choicesel.setFont(guiFont);
        choicesel.addItem("Select Nodes & Branches");
        choicesel.addItem("Select Nodes");
        choicesel.addItem("Select Branches");
        choicesel.addItem("Create Nodes");
        choicesel.addItem("Create Branches");
        p.addComponent(choicesel, 2, -2, 2D, 2D, 0, 0);
        p.addLineLabel("", 0);
        choicesel.setEnabled(false);
        p.addComponent(changes_button, 2, -2, 2D, 2D, 0, 0);
        p.addLineLabel("", 0);
        changes_button.setEnabled(false);
        portScroller_ = new ViewportScroller(90, 90, 500D, 500D, 400D, 400D, 0.0D, 0.0D);
        portScroller_.setBackground(Color.white);
        p.constraints.insets.bottom = 0;
        p.addLabel("Viewing Offset", 0, 0, 1.0D, 1.0D, 0, 0);
        p.constraints.insets.top = p.constraints.insets.bottom = 0;
        p.addComponent(portScroller_, 0, 0, 1.0D, 1.0D, 0, 0);
        p.constraints.insets.top = p.constraints.insets.bottom = 0;
        p.addButton("Center", guiFont, 0, 0, 1.0D, 1.0D, 0, 0);
        scaleLabel_ = p.addLineLabel("Scale: 1", 0);
        LPanel sp = new LPanel();
        sp.setFont(guiFont);
        sp.spacing = 0;
        sp.constraints.insets.top = sp.constraints.insets.bottom = 0;
        sp.addButton("Scale / 1.25", guiFont, 1, -1, 1.0D, 1.0D, 0, 0);
        sp.addButton("Scale = 1", guiFont, 1, -1, 1.0D, 1.0D, 0, 0);
        sp.addButton("Scale * 1.25", guiFont, 0, -1, 1.0D, 1.0D, 0, 0);
        sp.finish();
        p.addComponent(sp, 0, 0, 1.0D, 1.0D, 0, 0);
        p.constraints.insets.top = 0;
        p.addLineLabel("", 0);
        statustextField = new JTextField(25);
        statustextField.setText("STATUS: Waiting");
        statustextField.setForeground(Color.red);
        statustextField.setBackground(Color.lightGray);
        p.addComponent(statustextField, 1, -1, 1.0D, 1.0D, 0, 0);
        Panel controls_superpanel = new Panel();
        controls_superpanel.setFont(guiFont);
        controls_superpanel.add("North", p);
        p.finish();
        getContentPane().add("West", controls_superpanel);
        controls_ = controls_superpanel;
        graph_ = graph_in;
        Node.defaults.setBoundingBox(20D, 20D, 20D);
        graphCanvas_ = new GraphCanvas(graph_, this);
        graphCanvas_.setBackground(Color.white);
        viewingPanel_ = new ScrolledPanel(graphCanvas_);
        viewingPanel_.setBackground(Color.white);
        getContentPane().add("Center", viewingPanel_);
        validate();
    }

    public static void setContext(URL context)
    {
        context_ = context;
    }

    public TCS tcs;
    public LPanel p;
    public JProgressBar progressBar;
    public Button run_button;
    public Button changes_button;
    public Choice choicegaps;
    public Choice choicesel;
    public Choice choicemapchars;
    public Checkbox cb;
    public Checkbox manual_box;
    public JTextField statustextField;
    public JTextField manualConnections;
    public Checkbox manualBox;
    public Label calcLimitLabel;
    public Choice conLimit;
    public boolean cancel;
    public String filename;
    public String outfile;
    public String logfile;
    public Label infilelabel;
    private boolean gapmode;
    private GMLobject GMLfile_;
    private Hashtable algHashTable_;
    private Hashtable algNameHashTable_;
    private AlgPropDialog algPropDialog_;
    private Menu algorithmMenu_;
    private CheckboxMenuItem cbmiDirected_;
    private Panel controls_;
    private boolean doDistances;
    private FileDialog fd2;
    private String filename_;
    private FontPropDialog fontPropDialog_;
    private FontPropDialog edgeFontPropDialog_;
    private GraphCanvas graphCanvas_;
    private Graph graph_;
    private GroupControl groupControl_;
    private Hashtable menuHashTable_;
    private pictdialog pictDialog_;
    private ViewportScroller portScroller_;
    private PSdialog psDialog_;
    private Label scaleLabel_;
    private double scale_;
    private CheckboxMenuItem showControls_;
    private ScrolledPanel viewingPanel_;
    protected static int spacing_ = 4;
    private static URL context_ = null;

}
