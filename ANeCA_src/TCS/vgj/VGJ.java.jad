// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   VGJ.java

package EDU.auburn.VGJ;

import EDU.auburn.VGJ.algorithm.shawn.Spring;
import EDU.auburn.VGJ.algorithm.tree.TreeAlgorithm;
import EDU.auburn.VGJ.graph.Node;
import EDU.auburn.VGJ.gui.GraphWindow;
import clad.TCS;
import java.applet.Applet;
import java.awt.*;
import java.io.File;
import java.io.PrintStream;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.*;

public class VGJ extends Applet
{

    public boolean action(Event event, Object what)
    {
        if(event.target instanceof Button)
        {
            if(((String)what).equals("Exit"))
            {
                System.exit(0);
            } else
            {
                buildNewTCSWindow();
            }
        }
        return super.action(event, what);
    }

    public void init()
    {
        Button b = new Button("Start New TCS Analysis");
        b.setFont(new Font("Charcoal", 0, 10));
        if(isApp_)
        {
            setLayout(new GridLayout(2, 1));
            add(b);
            Button c = new Button("Exit");
            c.setFont(new Font("Charcoal", 0, 10));
            add(c);
        } else
        {
            setLayout(new GridLayout(1, 1));
            add(b);
        }
        Node.setToolkit(getToolkit());
        if(!isApp_)
        {
            Node.setContext(getCodeBase());
            GraphWindow.setContext(getCodeBase());
        }
        validate();
        setVisible(true);
    }

    private GraphWindow buildNewTCSWindow()
    {
        GraphWindow graph_editing_window = new GraphWindow(true);
        TreeAlgorithm talg = new TreeAlgorithm('d');
        graph_editing_window.addAlgorithm(talg, "Tree Down");
        talg = new TreeAlgorithm('u');
        graph_editing_window.addAlgorithm(talg, "Tree Up");
        talg = new TreeAlgorithm('l');
        graph_editing_window.addAlgorithm(talg, "Tree Left");
        talg = new TreeAlgorithm('r');
        graph_editing_window.addAlgorithm(talg, "Tree Right");
        Spring spring = new Spring();
        graph_editing_window.addAlgorithm(spring, "Spring tree");
        if(System.getProperty("os.name").startsWith("Mac OS"))
        {
            TCS.currentOS = "macintosh";
        } else
        if(System.getProperty("os.name").startsWith("Windows"))
        {
            TCS.currentOS = "windows";
        } else
        {
            TCS.currentOS = "unix";
        }
        if(appCount_++ == 0)
        {
            graph_editing_window.setTitle("TCS v1.21     (Java Version: " + System.getProperty("java.version") + " from " + System.getProperty("java.vendor") + ")" + " -- " + System.getProperty("os.name") + " " + System.getProperty("os.version"));
        } else
        {
            graph_editing_window.setTitle("TCS v1.21:" + appCount_ + "     (Java Version: " + System.getProperty("java.version") + " from " + System.getProperty("java.vendor") + ")" + " -- " + System.getProperty("os.name") + " " + System.getProperty("os.version"));
        }
        graph_editing_window.setResizable(true);
        graph_editing_window.pack();
        graph_editing_window.setVisible(true);
        return graph_editing_window;
    }

    public static void main(String args[])
    {
        try
        {
            UIManager.getSystemLookAndFeelClassName();
        }
        catch(Exception _ex) { }
        if(args.length != 0)
        {
            runCommandLineVersion(args);
        } else
        {
            JFrame frame = new JFrame("TCSv1.21");
            VGJ vgj = new VGJ();
            vgj.isApp_ = true;
            vgj.init();
            vgj.start();
            frame.getContentPane().add("Center", vgj);
            frame.setResizable(true);
            frame.setSize(190, 120);
            frame.validate();
            frame.setVisible(true);
        }
    }

    public static void CheckExpiration(Frame theframe)
    {
        Calendar now = Calendar.getInstance();
        if(now.get(2) != 5 && now.get(2) != 6 || now.get(1) != 2003)
        {
            JOptionPane.showMessageDialog(theframe, "Program has expired! \n    Bye...", "TCS warning", 2);
            theframe.dispose();
            System.exit(0);
        }
    }

    private static void runCommandLineVersion(String args[])
    {
        boolean saveStandard = false;
        boolean saveAsPict = false;
        String fileToRun = args[0];
        if(fileToRun.equals("-toPict"))
        {
            saveAsPict = true;
            fileToRun = args[1];
        } else
        if(fileToRun.equals("-saveStand"))
        {
            saveStandard = true;
            fileToRun = args[1];
        }
        File sourceDirectory = new File(fileToRun);
        File files[] = null;
        GraphWindow gw = null;
        if(!saveAsPict)
        {
            System.out.println("Will use phylip and graph files");
            files = filterFiles(sourceDirectory, ".phylip");
        } else
        {
            System.out.println("Will use graph files");
            files = filterFiles(sourceDirectory, ".graph");
        }
        gw = buildWindow_();
        gw.hide();
        for(int x = 0; x < files.length; x++)
        {
            String file = sourceDirectory.getAbsolutePath() + "/" + files[x].getName();
            System.out.println("TCS processing: " + file);
            if(saveAsPict)
            {
                gw.pictSave(file);
            } else
            if(saveStandard)
            {
                gw.saveStandard(file);
            } else
            {
                int maxdist = 0;
                if(args.length > 1)
                {
                    String nextArg = args[1];
                    maxdist = Integer.parseInt(nextArg);
                }
                buildWindow_(file, gw, maxdist);
            }
        }

        System.exit(0);
    }

    private static File[] filterFiles(File sourceDirectory, String suffix)
    {
        String allFileNames[] = sourceDirectory.list();
        Vector filteredFiles = new Vector();
        for(int i = 0; i < allFileNames.length; i++)
        {
            File file = new File(sourceDirectory, allFileNames[i]);
            if(file.isFile() && file.canRead() && file.getName().endsWith(suffix))
            {
                filteredFiles.addElement(file);
            }
        }

        File files[] = new File[filteredFiles.size()];
        for(int i = 0; i < filteredFiles.size(); i++)
        {
            files[i] = (File)filteredFiles.elementAt(i);
        }

        return files;
    }

    private static void buildWindow_(String nextFile, GraphWindow gw, int maxdist)
    {
        gw.open(nextFile);
        if(maxdist > 0)
        {
            gw.setMaxDistance(maxdist);
        }
        gw.runTCS();
        gw.saveStandard(nextFile + ".graph");
        gw.dispose();
    }

    private static GraphWindow buildWindow_()
    {
        GraphWindow graph_editing_window = new GraphWindow(true);
        TreeAlgorithm talg = new TreeAlgorithm('d');
        graph_editing_window.addAlgorithm(talg, "Tree Down");
        talg = new TreeAlgorithm('u');
        graph_editing_window.addAlgorithm(talg, "Tree Up");
        talg = new TreeAlgorithm('l');
        graph_editing_window.addAlgorithm(talg, "Tree Left");
        talg = new TreeAlgorithm('r');
        graph_editing_window.addAlgorithm(talg, "Tree Right");
        graph_editing_window.setResizable(true);
        graph_editing_window.pack();
        graph_editing_window.setVisible(true);
        return graph_editing_window;
    }

    public VGJ()
    {
        appCount_ = 0;
        isApp_ = false;
    }

    private int appCount_;
    private boolean isApp_;
}
