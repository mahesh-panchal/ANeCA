// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   NodePropertiesDialog.java

package EDU.auburn.VGJ.graph;

import EDU.auburn.VGJ.gui.*;
import EDU.auburn.VGJ.util.DDimension3;
import EDU.auburn.VGJ.util.DPoint3;
import java.awt.*;
import java.util.Enumeration;
import java.util.Hashtable;

// Referenced classes of package EDU.auburn.VGJ.graph:
//            Node

public class NodePropertiesDialog extends Dialog
{

    public NodePropertiesDialog(Frame frame, Node node_in)
    {
        super(frame, "", true);
        notDefault_ = new Component[10];
        ndCount_ = 0;
        frame_ = frame;
        node_ = node_in;
        if(node_ == null)
        {
            node_ = Node.defaults;
        }
        LPanel p = new LPanel();
        notDefault_[ndCount_++] = p.addLineLabel("Position:", 0);
        notDefault_[ndCount_++] = p.addLabel("X", 1, 1, 0.0D, 1.0D, 0, 2);
        notDefault_[ndCount_++] = posX_ = p.addTextField(8, 1, -1, 1.0D, 1.0D, 1, 1);
        notDefault_[ndCount_++] = p.addLabel("Y", 1, 1, 0.0D, 1.0D, 0, 2);
        notDefault_[ndCount_++] = posY_ = p.addTextField(8, 1, -1, 1.0D, 1.0D, 1, 1);
        notDefault_[ndCount_++] = p.addLabel("Z", 1, 1, 0.0D, 1.0D, 0, 2);
        notDefault_[ndCount_++] = posZ_ = p.addTextField(8, 0, -1, 1.0D, 1.0D, 1, 1);
        p.addLineLabel("Bounding Box:", 0);
        p.addLabel("Height", 1, 1, 0.0D, 1.0D, 0, 2);
        bboxH_ = p.addTextField(8, 1, -1, 1.0D, 1.0D, 1, 1);
        p.addLabel("Width", 1, 1, 0.0D, 1.0D, 0, 2);
        bboxW_ = p.addTextField(8, 1, -1, 1.0D, 1.0D, 1, 1);
        p.addLabel("Depth", 1, 1, 0.0D, 1.0D, 0, 2);
        bboxD_ = p.addTextField(8, 0, -1, 1.0D, 1.0D, 1, 1);
        p.addLineLabel("Shape:", 1);
        shape_ = new Choice();
        for(int i = 0; Node.shapeNames[i] != null; i++)
        {
            shape_.addItem(Node.shapeNames[i]);
        }

        p.addComponent(shape_, 0, -1, 1.0D, 0.0D, 0, 1);
        notDefault_[ndCount_++] = p.addLineLabel("Label:", 1);
        notDefault_[ndCount_++] = labelText_ = p.addTextField(8, 0, -1, 1.0D, 1.0D, 1, 1);
        p.addLabel("Label Position", 1, 1, 0.0D, 1.0D, 0, 2);
        labelPos_ = new Choice();
        labelPos_.addItem("Below");
        labelPos_.addItem("In (Autosize)");
        labelPos_.addItem("Center");
        p.addComponent(labelPos_, 0, -1, 1.0D, 0.0D, 0, 1);
        p.addLineLabel("Image: (Leave Height and Width blank for automatic sizing.)", 0);
        p.addLabel("Type", 1, 1, 0.0D, 1.0D, 0, 2);
        imageType_ = new Choice();
        imageType_.addItem("URL");
        imageType_.addItem("File");
        p.addComponent(imageType_, 0, -1, 1.0D, 0.0D, 0, 1);
        p.addLabel("Source", 1, 1, 0.0D, 1.0D, 0, 2);
        imageText_ = p.addTextField(8, 0, -1, 1.0D, 1.0D, 1, 1);
        p.addLineLabel("Data", 1);
        data_ = new Choice();
        dataPanel_ = new Panel();
        dataPanel_.add(data_);
        p.addComponent(dataPanel_, 0, -1, 1.0D, 0.0D, 0, 1);
        dataText_ = new TextArea(4, 20);
        dataText_.setBackground(Color.white);
        p.constraints.insets.top = 0;
        p.addComponent(dataText_, 0, -1, 1.0D, 1.0D, 3, 0);
        p.addButtonPanel("Apply Cancel", 0);
        p.finish();
        add("Center", p);
        setNode(node_);
    }

    public boolean action(Event event, Object object)
    {
        if(event.target instanceof Button)
        {
            if("Apply".equals(object))
            {
                if(setValues_())
                {
                    hide();
                }
                return true;
            }
            if("Cancel".equals(object))
            {
                hide();
                return true;
            }
        } else
        if(event.target == data_)
        {
            dataHash_.put(currentData_, dataText_.getText());
            String old_data = currentData_;
            currentData_ = data_.getSelectedItem();
            if(!currentData_.equals("<NEW>"))
            {
                String value = (String)dataHash_.get(currentData_);
                if(value == null)
                {
                    value = new String("");
                }
                dataText_.setText(value);
            } else
            {
                new InputDialog(frame_, "Enter name for new data item (must be a letter followed by letters and numbers).", this, 9999);
                if(data_.getSelectedItem().equals("<NEW>"))
                {
                    data_.select(old_data);
                }
            }
        }
        return false;
    }

    public boolean handleEvent(Event event)
    {
        if(event.target instanceof InputDialog)
        {
            String label = (String)event.arg;
            for(int i = 0; i < label.length(); i++)
            {
                char chr = label.charAt(i);
                if((chr < 'a' || chr > 'z') && (chr < 'A' || chr > 'Z') && (i == 0 || chr < '0' || chr > '9'))
                {
                    new MessageDialog(frame_, "Error", "Bad format for new data item name.", true);
                    return true;
                }
            }

            data_.addItem(label);
            data_.select(data_.countItems() - 1);
            currentData_ = label;
            dataText_.setText("");
            return true;
        }
        if(event.id == 201)
        {
            hide();
            return true;
        } else
        {
            return super.handleEvent(event);
        }
    }

    public void setNode(Node node_in)
    {
        node_ = node_in;
        if(node_ == null)
        {
            node_ = Node.defaults;
        }
        String title;
        if(node_ == Node.defaults)
        {
            title = "Properties For Newly Created Nodes";
        } else
        {
            title = "Node " + node_.id_;
        }
        setTitle(title);
        if(node_ != Node.defaults)
        {
            DPoint3 pos = node_.getPosition3();
            posX_.setText(String.valueOf(pos.x));
            posY_.setText(String.valueOf(pos.y));
            posZ_.setText(String.valueOf(pos.z));
            labelText_.setText(node_.getLabel());
            for(int i = 0; i < ndCount_; i++)
            {
                notDefault_[i].setVisible(true);
            }

        } else
        {
            for(int i = 0; i < ndCount_; i++)
            {
                notDefault_[i].hide();
            }

        }
        DDimension3 bbox = node_.getBoundingBox3();
        bboxW_.setText(String.valueOf(bbox.width));
        bboxH_.setText(String.valueOf(bbox.height));
        bboxD_.setText(String.valueOf(bbox.depth));
        shape_.select(node_.getShape());
        imageType_.select(0);
        String type = node_.getImageType();
        if(type != null && type.equalsIgnoreCase("file"))
        {
            imageType_.select(1);
        }
        imageText_.setText(node_.getImageSource());
        labelPos_.select(node_.getLabelPosition());
        dataPanel_.remove(data_);
        data_ = new Choice();
        dataPanel_.add(data_);
        dataHash_ = (Hashtable)node_.data_.clone();
        data_.addItem("<NEW>");
        String key;
        for(Enumeration keys = dataHash_.keys(); keys.hasMoreElements(); data_.addItem(key))
        {
            key = (String)keys.nextElement();
        }

        if(data_.countItems() == 1)
        {
            data_.addItem("Data");
        }
        data_.select(1);
        currentData_ = data_.getItem(1);
        String value = (String)dataHash_.get(currentData_);
        if(value == null)
        {
            value = new String("");
        }
        dataText_.setText(value);
        pack();
    }

    private boolean setValues_()
    {
        String current = new String();
        boolean gotw = true;
        boolean goth = true;
        try
        {
            if(node_ != Node.defaults)
            {
                current = "X";
                double x = (new Double(posX_.getText().trim())).doubleValue();
                current = "Y";
                double y = (new Double(posY_.getText().trim())).doubleValue();
                current = "Z";
                double z = (new Double(posZ_.getText().trim())).doubleValue();
                node_.setPosition(x, y, z);
            }
            current = "Width";
            String tmp = bboxW_.getText().trim();
            double w = 0.0D;
            if(tmp.length() > 0)
            {
                w = (new Double(tmp)).doubleValue();
            } else
            {
                gotw = false;
            }
            current = "Height";
            tmp = bboxH_.getText().trim();
            double h = 0.0D;
            if(tmp.length() > 0)
            {
                h = (new Double(tmp)).doubleValue();
            } else
            {
                goth = false;
            }
            current = "Depth";
            double d = (new Double(bboxD_.getText().trim())).doubleValue();
            String src = imageText_.getText().trim();
            if(src.length() <= 0)
            {
                if(!gotw)
                {
                    current = "Width (required if no Image Source)";
                    throw new Exception();
                }
                if(!goth)
                {
                    current = "Height (required if no Image Source)";
                    throw new Exception();
                }
            }
            node_.setBoundingBox(w, h, d);
            node_.setShape(shape_.getSelectedIndex());
            if(node_ != Node.defaults)
            {
                node_.setLabel(labelText_.getText());
            }
            node_.setImageSource(src);
            node_.setImageType(imageType_.getSelectedItem());
            node_.setImage(null, gotw ^ true, goth ^ true);
            node_.setLabelPosition(labelPos_.getSelectedItem());
            dataHash_.put(currentData_, dataText_.getText());
            for(Enumeration keys = dataHash_.keys(); keys.hasMoreElements();)
            {
                String key = (String)keys.nextElement();
                String value = (String)dataHash_.get(key);
                if(value != null && value.length() != 0)
                {
                    node_.data_.put(key, value);
                }
            }

        }
        catch(Exception _ex)
        {
            new MessageDialog(frame_, "Error", "Entered " + current + " is not a number.", true);
            return false;
        }
        return true;
    }

    private TextField posX_;
    private TextField posY_;
    private TextField posZ_;
    private TextField bboxW_;
    private TextField bboxH_;
    private TextField bboxD_;
    private TextField labelText_;
    private TextField imageText_;
    private Choice shape_;
    private Choice imageType_;
    private Choice labelPos_;
    private Checkbox defCB_;
    private Node node_;
    private Component notDefault_[];
    private int ndCount_;
    private Frame frame_;
    private Choice data_;
    private Panel dataPanel_;
    private TextArea dataText_;
    private Hashtable dataHash_;
    private String currentData_;
}
