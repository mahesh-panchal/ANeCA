// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) braces 
// Source File Name:   Graph.java

package EDU.auburn.VGJ.graph;

import EDU.auburn.VGJ.util.DDimension3;
import EDU.auburn.VGJ.util.DPoint3;
import java.awt.Point;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Hashtable;

// Referenced classes of package EDU.auburn.VGJ.graph:
//            NodeList, GMLobject, Node, Edge, 
//            Set

public class Graph
    implements Cloneable
{

    public Graph()
    {
        directed_ = false;
        nodeList_ = new NodeList();
        idHash_ = new Hashtable();
        edges_ = new Hashtable();
        lastTopId_ = 0;
    }

    public Graph(GMLobject gml)
    {
        directed_ = false;
        nodeList_ = new NodeList();
        idHash_ = new Hashtable();
        edges_ = new Hashtable();
        lastTopId_ = 0;
        directed_ = false;
        Integer tmp;
        if((tmp = (Integer)gml.getValue("directed", 0)) != null)
        {
            directed_ = tmp.intValue() != 0;
        }
        for(GMLobject nodegml = gml.getGMLSubObject("node", 3, false); nodegml != null; nodegml = gml.getNextGMLSubObject())
        {
            Node node = new Node(nodegml);
            Integer id;
            if((id = node.getIdObject()) != null)
            {
                if(!idHash_.containsKey(id))
                {
                    idHash_.put(id, node);
                    nodeList_.addNode(node);
                }
            } else
            {
                nodeList_.addNode(node);
            }
        }

        for(GMLobject edgegml = gml.getGMLSubObject("edge", 3, false); edgegml != null; edgegml = gml.getNextGMLSubObject())
        {
            Integer source = (Integer)edgegml.getValue("source", 0);
            Integer target = (Integer)edgegml.getValue("target", 0);
            if(source != null && target != null)
            {
                Node sourcenode = (Node)idHash_.get(source);
                Node targetnode = (Node)idHash_.get(target);
                if(sourcenode != null && targetnode != null)
                {
                    insertEdge(new Edge(sourcenode, targetnode, edgegml));
                }
            }
        }

        validateIds();
        for(Node tmpnode = firstNode(); tmpnode != null; tmpnode = nextNode(tmpnode))
        {
            if(tmpnode.inGroup())
            {
                tmpnode.groupNode_ = (Node)idHash_.get(new Integer(tmpnode.groupNodeId_));
                if(tmpnode.groupNode_ != null)
                {
                    tmpnode.groupNode_.isGroup_ = true;
                    tmpnode.groupNode_.setChild(tmpnode.getIndex());
                }
            }
        }

    }

    public Graph(boolean yesorno)
    {
        directed_ = false;
        nodeList_ = new NodeList();
        idHash_ = new Hashtable();
        edges_ = new Hashtable();
        lastTopId_ = 0;
        directed_ = yesorno;
    }

    private void adjustGroupChildren_(Node node, double dx, double dy, double dz, 
            double rw, double rh, double rd)
    {
        for(int child_index = node.firstChild(); child_index != -1; child_index = node.nextChild())
        {
            Node child = getNodeFromIndex(child_index);
            if(child.isGroup() && !child.groupActive())
            {
                adjustGroupChildren_(child, dx, dy, dz, rw, rh, rd);
            } else
            {
                child.x_ += dx;
                child.y_ += dy;
                child.z_ += dz;
                child.width_ *= rw;
                child.height_ *= rh;
                child.depth_ *= rd;
            }
        }

    }

    public Set children(int n)
    {
        return nodeList_.nodeFromIndex(n).getChildren();
    }

    public Object clone()
    {
        try
        {
            Graph copy = (Graph)super.clone();
            copy.nodeList_ = (NodeList)nodeList_.clone();
            copy.idHash_ = new Hashtable();
            copy.edges_ = new Hashtable();
            copy.directed_ = directed_;
            copy.lastTopId_ = lastTopId_;
            Node head;
            Node tail;
            Edge newedge;
            for(Enumeration edges = edges_.elements(); edges.hasMoreElements(); copy.edges_.put(new Point(tail.index_, head.index_), newedge))
            {
                Edge edge = (Edge)edges.nextElement();
                tail = copy.nodeList_.nodeFromIndex(edge.tail_.getIndex());
                head = copy.nodeList_.nodeFromIndex(edge.head_.getIndex());
                newedge = new Edge(tail, head, edge);
            }

            for(Node tmpnode = copy.firstNode(); tmpnode != null; tmpnode = copy.nextNode(tmpnode))
            {
                copy.idHash_.put(new Integer(tmpnode.getId()), tmpnode);
            }

            return copy;
        }
        catch(CloneNotSupportedException _ex)
        {
            return null;
        }
    }

    public void copy(Graph newgraph)
    {
        directed_ = newgraph.directed_;
        nodeList_ = newgraph.nodeList_;
        idHash_ = newgraph.idHash_;
        edges_ = newgraph.edges_;
        lastTopId_ = newgraph.lastTopId_;
    }

    public void dummysToEdgePaths()
    {
        for(Node tmpnode = firstNode(); tmpnode != null; tmpnode = nextNode(tmpnode))
        {
            if(!tmpnode.isDummy_)
            {
                for(int child = tmpnode.firstChild(); child != -1; child = tmpnode.nextChild())
                {
                    Node childnode = getNodeFromIndex(child);
                    Node tmpchild = childnode;
                    int numdummies = 0;
                    String label = getEdge(tmpnode.index_, child).getLabel();
                    for(; tmpchild != null && tmpchild.isDummy_; tmpchild = getNodeFromIndex(tmpchild.firstChild()))
                    {
                        numdummies++;
                    }

                    if(numdummies > 0 && tmpchild != null)
                    {
                        DPoint3 edge_points[] = new DPoint3[numdummies];
                        tmpchild = childnode;
                        int dummy = 0;
                        for(; tmpchild.isDummy_; tmpchild = getNodeFromIndex(tmpchild.firstChild()))
                        {
                            edge_points[dummy++] = new DPoint3(tmpchild.getPosition3());
                        }

                        insertEdge(tmpnode.index_, tmpchild.index_, edge_points, label);
                    }
                }

            }
        }

        for(Node tmpnode = firstNode(); tmpnode != null; tmpnode = nextNode(tmpnode))
        {
            if(tmpnode.isDummy_)
            {
                removeNode(tmpnode);
            }
        }

    }

    private void fillBackEdges_()
    {
        for(Enumeration edges = edges_.elements(); edges.hasMoreElements();)
        {
            Edge edge = (Edge)edges.nextElement();
            if(edges_.get(new Point(edge.head().getIndex(), edge.tail().getIndex())) == null)
            {
                int n1 = edge.tail().getIndex();
                int n2 = edge.head().getIndex();
                edge.head().setChild(n1);
                DPoint3 reverse_points[];
                if(n1 > n2)
                {
                    DPoint3 points[] = edge.points();
                    int length = points.length;
                    reverse_points = new DPoint3[length];
                    for(int i = 0; i < length; i++)
                    {
                        reverse_points[i] = points[length - 1 - i];
                    }

                } else
                {
                    reverse_points = new DPoint3[0];
                }
                edges_.put(new Point(n2, n1), new Edge(edge.head(), edge.tail(), reverse_points, true));
            }
        }

    }

    public int firstAvailable()
    {
        return nodeList_.getFirstAvailable();
    }

    public Node firstNode()
    {
        return nodeList_.firstNode();
    }

    public int firstNodeIndex()
    {
        return nodeList_.firstNodeIndex();
    }

    public Edge getEdge(int n1, int n2)
    {
        return (Edge)edges_.get(new Point(n1, n2));
    }

    public DPoint3[] getEdgePathPoints(int n1, int n2)
    {
        Edge edge = (Edge)edges_.get(new Point(n1, n2));
        if(edge == null)
        {
            return null;
        } else
        {
            return edge.points();
        }
    }

    public Enumeration getEdges()
    {
        return edges_.elements();
    }

    private int getGroupCoordinates_(Node node, DPoint3 pos, DDimension3 size)
    {
        int count = 0;
        for(int child_index = node.firstChild(); child_index != -1; child_index = node.nextChild())
        {
            Node child = getNodeFromIndex(child_index);
            if(child.isGroup() && !child.groupActive())
            {
                count += getGroupCoordinates_(child, pos, size);
            } else
            {
                count++;
                size.width += child.width_ * child.width_;
                size.height += child.height_ * child.height_;
                size.depth += child.depth_ * child.depth_;
                pos.x += child.x_;
                pos.y += child.y_;
                pos.z += child.z_;
            }
        }

        return count;
    }

    public int getIndexFromNode(Node node)
    {
        return node.index_;
    }

    public Node getNodeFromId(int id)
    {
        return (Node)idHash_.get(new Integer(id));
    }

    public Node getNodeFromIndex(int index)
    {
        return nodeList_.nodeFromIndex(index);
    }

    public void group(Node node, boolean state)
    {
        if(state && node.groupNode_ != null)
        {
            node.groupNode_.groupActive_ = true;
            Node groupnode = node.groupNode_;
            markGroupChildren_(groupnode, true);
            DPoint3 pos = new DPoint3(0.0D, 0.0D, 0.0D);
            DDimension3 size = new DDimension3(0.0D, 0.0D, 0.0D);
            int n = getGroupCoordinates_(groupnode, pos, size);
            pos.x /= n;
            pos.y /= n;
            pos.z /= n;
            size.width = Math.sqrt(size.width);
            size.height = Math.sqrt(size.height);
            size.depth = Math.sqrt(size.depth);
            groupnode.setPosition(pos);
            groupnode.setBoundingBox(size);
            groupnode.grouppos_ = pos;
            groupnode.groupbox_ = size;
        } else
        if(!state && node.isGroup_)
        {
            node.groupActive_ = false;
            markGroupChildren_(node, false);
            node.setSelected(false);
            double dx = node.x_ - node.grouppos_.x;
            double dy = node.y_ - node.grouppos_.y;
            double dz = node.z_ - node.grouppos_.z;
            double rw = node.width_ / node.groupbox_.width;
            double rh = node.height_ / node.groupbox_.height;
            double rd = node.depth_ / node.groupbox_.depth;
            adjustGroupChildren_(node, dx, dy, dz, rw, rh, rd);
        }
    }

    public int highestIndex()
    {
        return nodeList_.highestIndex();
    }

    public void insertEdge(int n1, int n2)
    {
        insertEdge(n1, n2, new DPoint3[0]);
    }

    public void insertEdge(int n1, int n2, DPoint3 points[])
    {
        insertEdge(new Edge(nodeList_.nodeFromIndex(n1), nodeList_.nodeFromIndex(n2), points, false));
    }

    public void insertEdge(int n1, int n2, DPoint3 points[], String label)
    {
        Edge edge = new Edge(nodeList_.nodeFromIndex(n1), nodeList_.nodeFromIndex(n2), points, false);
        insertEdge(edge);
        edge.setLabel(label);
    }

    public void insertEdge(Edge edge)
    {
        int n1 = edge.tail().getIndex();
        int n2 = edge.head().getIndex();
        edges_.remove(new Point(n1, n2));
        if(!directed_)
        {
            edges_.remove(new Point(n2, n1));
        }
        edge.tail().setChild(n2);
        if(!directed_)
        {
            edge.head().setChild(n1);
        }
        edges_.put(new Point(n1, n2), edge);
        DPoint3 points[] = edge.points();
        if(!directed_ && n1 != n2)
        {
            int length = points.length;
            DPoint3 reverse_points[] = new DPoint3[length];
            for(int i = 0; i < length; i++)
            {
                reverse_points[i] = points[length - 1 - i];
            }

            edges_.put(new Point(n2, n1), new Edge(edge.head(), edge.tail(), reverse_points, false, edge));
        }
    }

    public int insertNode()
    {
        return insertNode(false);
    }

    public int insertNode(boolean dummy)
    {
        Node node = new Node(dummy);
        nodeList_.addNode(node);
        node.haveId_ = true;
        node.id_ = lastTopId_;
        idHash_.put(new Integer(lastTopId_), node);
        do
        {
            lastTopId_++;
        } while(idHash_.containsKey(new Integer(lastTopId_)));
        return node.index_;
    }

    public void insertNodeAt(int index)
        throws IOException
    {
        IOException e = new IOException("Node " + index + " already exist.");
        if(nodeList_.nodeFromIndex(index) == null)
        {
            Node node = new Node();
            nodeList_.addNodeAt(node, index);
            node.haveId_ = true;
            node.id_ = lastTopId_;
            idHash_.put(new Integer(lastTopId_), node);
            do
            {
                lastTopId_++;
            } while(idHash_.containsKey(new Integer(lastTopId_)));
        } else
        {
            throw e;
        }
    }

    public boolean isDirected()
    {
        if(directed_)
        {
            return directed_;
        } else
        {
            return directed_;
        }
    }

    public void killGroup(Node node)
    {
        if(node.isGroup())
        {
            for(int child_index = node.firstChild(); child_index != -1; child_index = node.nextChild())
            {
                node.clearChild(child_index);
                Node child = getNodeFromIndex(child_index);
                child.inActiveGroup_ = false;
                child.groupNode_ = null;
                if(child.isGroup() && !child.groupActive_)
                {
                    markGroupChildren_(child, false);
                }
            }

            removeNode(node.getIndex());
        }
    }

    private void markGroupChildren_(Node node, boolean state)
    {
        for(int child_index = node.firstChild(); child_index != -1; child_index = node.nextChild())
        {
            Node child = getNodeFromIndex(child_index);
            child.inActiveGroup_ = state;
            if(child.isGroup_ && (state || !child.groupActive_))
            {
                markGroupChildren_(child, state);
            }
        }

    }

    public Node nextNode(Node node)
    {
        return nodeList_.nextNode(node);
    }

    public int nextNodeIndex(int index)
    {
        return nodeList_.nextNodeIndex(index);
    }

    public Node nodeFromIndex(int index)
    {
        return nodeList_.nodeFromIndex(index);
    }

    public int numberOfNodes()
    {
        return nodeList_.count();
    }

    public void pack()
    {
        int n = numberOfNodes();
        if(n == nodeList_.highestIndex() + 1)
        {
            return;
        }
        int highest_index = nodeList_.highestIndex();
        int map[] = new int[highest_index + 1];
        for(int node_index = nextNodeIndex(n - 1); node_index != -1; node_index = nextNodeIndex(node_index))
        {
            Node tmpnode = getNodeFromIndex(node_index);
            nodeList_.addNode(tmpnode);
            map[node_index] = tmpnode.index_;
            nodeList_.removeNodeAt(node_index);
        }

        for(Node tmpnode = firstNode(); tmpnode != null; tmpnode = nextNode(tmpnode))
        {
            for(int child = tmpnode.searchNextChild(n - 1); child != -1; child = tmpnode.searchNextChild(child + 1))
            {
                if(child >= n)
                {
                    tmpnode.setChild(map[child]);
                    tmpnode.clearChild(child);
                }
            }

        }

        for(Enumeration keys = edges_.keys(); keys.hasMoreElements();)
        {
            Point key = (Point)keys.nextElement();
            if(key.x >= n || key.y >= n)
            {
                if(key.x > highest_index || key.y > highest_index)
                {
                    edges_.remove(key);
                } else
                {
                    Edge element = (Edge)edges_.get(key);
                    edges_.remove(key);
                    if(key.x >= n)
                    {
                        key.x = map[key.x];
                    }
                    if(key.y >= n)
                    {
                        key.y = map[key.y];
                    }
                    edges_.put(key, element);
                }
            }
        }

    }

    public Set parents(int n)
    {
        Set parents = new Set();
        for(Node node = nodeList_.firstNode(); node != null; node = nodeList_.nextNode(node))
        {
            if(node.hasChild(n))
            {
                parents.includeElement(node.index_);
            }
        }

        return parents;
    }

    public void removeEdge(int n1, int n2)
    {
        Node tempnode = nodeList_.nodeFromIndex(n1);
        tempnode.clearChild(n2);
        edges_.remove(new Point(n1, n2));
        if(!directed_ && n1 != n2)
        {
            tempnode = nodeList_.nodeFromIndex(n2);
            tempnode.clearChild(n1);
            edges_.remove(new Point(n2, n1));
        }
    }

    public void removeEdge(Edge edge)
    {
        removeEdge(edge.tail().getIndex(), edge.head().getIndex());
    }

    public void removeEdgePaths()
    {
        for(Enumeration elements = edges_.elements(); elements.hasMoreElements();)
        {
            Edge edge = (Edge)elements.nextElement();
            edge.points_ = new DPoint3[0];
        }

    }

    private void removeFalseEdges_()
    {
        for(Enumeration edges = edges_.elements(); edges.hasMoreElements();)
        {
            Edge edge = (Edge)edges.nextElement();
            if(edge.isDummy())
            {
                edge.tail().clearChild(edge.head().getIndex());
                edges_.remove(new Point(edge.tail().getIndex(), edge.head().getIndex()));
            }
        }

    }

    public void removeGroups()
    {
        for(int node_index = nodeList_.firstNodeIndex(); node_index != -1; node_index = nodeList_.nextNodeIndex(node_index))
        {
            killGroup(getNodeFromIndex(node_index));
        }

    }

    public void removeNode(int n)
    {
        Set pSet = new Set();
        Set cSet = new Set();
        Node remnode = nodeList_.nodeFromIndex(n);
        if(remnode.isGroup())
        {
            for(int child_index = remnode.firstChild(); child_index != -1; child_index = remnode.nextChild())
            {
                removeNode(child_index);
            }

        } else
        {
            for(int child = remnode.firstChild(); child != -1; child = remnode.nextChild())
            {
                removeEdge(n, child);
            }

            for(Node node = nodeList_.firstNode(); node != null; node = nodeList_.nextNode(node))
            {
                if(node.hasChild(n))
                {
                    removeEdge(node.getIndex(), n);
                }
            }

        }
        nodeList_.removeNodeAt(n);
        Integer id = remnode.getIdObject();
        idHash_.remove(id);
        if(id.intValue() < lastTopId_)
        {
            lastTopId_ = id.intValue();
        }
        if(remnode.inGroup())
        {
            remnode.groupNode_.clearChild(remnode.getIndex());
            if(remnode.groupNode_.firstChild() == -1)
            {
                removeNode(remnode.groupNode_.getIndex());
            }
        }
    }

    public void removeNode(Node nin)
    {
        removeNode(nin.getIndex());
    }

    public void setDirected(boolean directed)
    {
        if(directed == directed_)
        {
            return;
        }
        if(directed)
        {
            directed_ = true;
            removeFalseEdges_();
        } else
        {
            fillBackEdges_();
            directed_ = false;
        }
    }

    public void setGMLvalues(GMLobject gml)
    {
        gml.deleteAll("node", 3);
        for(Node node = nodeList_.firstNode(); node != null; node = nodeList_.nextNode(node))
        {
            GMLobject nodegml = new GMLobject("node", 3);
            gml.addObjectToEnd(nodegml);
            node.setGMLvalues(nodegml);
        }

        gml.setValue("directed", 0, new Integer(directed_ ? 1 : 0));
        gml.deleteAll("edge", 3);
        for(Enumeration edges = edges_.elements(); edges.hasMoreElements();)
        {
            Edge edge = (Edge)edges.nextElement();
            if(directed_ || edge.tail().getIndex() <= edge.head().getIndex())
            {
                GMLobject edgegml = new GMLobject("edge", 3);
                gml.addObjectToEnd(edgegml);
                edge.setGMLvalues(edgegml);
            }
        }

    }

    public void setNodeGroup(Node node, Node groupnode)
    {
        if(node.inGroup())
        {
            Node current_group = node.groupNode_;
            current_group.clearChild(node.getIndex());
            if(current_group.firstChild() == -1)
            {
                removeNode(current_group.getIndex());
            }
        }
        node.groupNode_ = groupnode;
        groupnode.setChild(node.getIndex());
    }

    private void validateIds()
    {
        for(lastTopId_ = 0; idHash_.containsKey(new Integer(lastTopId_)); lastTopId_++) { }
        for(Node tmpnode = firstNode(); tmpnode != null; tmpnode = nextNode(tmpnode))
        {
            if(tmpnode.getIdObject() == null)
            {
                tmpnode.id_ = lastTopId_;
                tmpnode.haveId_ = true;
                idHash_.put(new Integer(lastTopId_), tmpnode);
                do
                {
                    lastTopId_++;
                } while(idHash_.containsKey(new Integer(lastTopId_)));
            }
        }

    }

    private NodeList nodeList_;
    private Hashtable idHash_;
    private boolean directed_;
    private int lastTopId_;
    private Hashtable edges_;
}
